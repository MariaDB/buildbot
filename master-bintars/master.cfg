# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from buildbot.process.properties import Property, Properties
from buildbot.steps.shell import ShellCommand, Compile, Test, SetPropertyFromCommand
from buildbot.steps.mtrlogobserver import MTR, MtrLogObserver
from buildbot.steps.source.github import GitHub
from buildbot.process.remotecommand import RemoteCommand
from datetime import timedelta
from twisted.internet import defer

import docker
import os
import sys

sys.path.insert(0, "/srv/buildbot/master")
sys.setrecursionlimit(10000)

from common_factories import *
from constants import *
from locks import *
from schedulers_definition import *
from utils import *

FQDN = os.getenv("BUILDMASTER_WG_IP", default="100.64.100.1")

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Load the slave, database passwords and 3rd-party tokens from an external private file, so
# that the rest of the configuration can be public.
config = {"private": {}}
exec(open("../master-private.cfg").read(), config, {})

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.


c["services"] = []
context = util.Interpolate("buildbot/%(prop:buildername)s")
gs = reporters.GitHubStatusPush(
    token=config["private"]["gh_mdbci"]["access_token"],
    context=context,
    startDescription="Build started.",
    endDescription="Build done.",
    verbose=True,
    builders=github_status_builders,
)
c["services"].append(gs)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').
c["title"] = os.getenv("TITLE", default="MariaDB CI")
c["titleURL"] = os.getenv("TITLE_URL", default="https://github.com/MariaDB/server")

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.
c["buildbotURL"] = os.getenv("BUILDMASTER_URL", default="https://buildbot.mariadb.org/")

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
port = int(os.getenv("MASTER_NONLATENT_BINTARS_WORKER_PORT", default="10002"))
c["protocols"] = {"pb": {"port": port}}

####### DB URL

c["db"] = {
    # This specifies what database buildbot uses to store its state.
    "db_url": config["private"]["db_url"]
}

mtrDbPool = util.EqConnectionPool(
    "MySQLdb",
    config["private"]["db_host"],
    config["private"]["db_user"],
    config["private"]["db_password"],
    config["private"]["db_mtr_db"],
)

####### Disable net usage reports from being sent to buildbot.net
c["buildbotNetUsageData"] = None

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.
c["schedulers"] = getSchedulers()

####### WORKERS


def mkWorker(name, **kwargs):
    return worker.Worker(name, config["private"]["worker_pass"][name], **kwargs)


# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c["workers"] = []

c["workers"].append(mkWorker(os.getenv("MASTER_NONLATENT_BINTARS_WORKER", default="monty-bbw1-x64"), max_builds=1, properties={"jobs": 12}))


####### FACTORY CODE
def memory_def():
    # TODO Dummy implementation, replace with actual logic to define memory
    return "8192"


gccWarningPattern = "^(.*?):([0-9]+):(?:[0-9]+:)? [Ww]arning: (.*)$"
kvm_scpopt = "-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PubkeyAcceptedKeyTypes=ssh-dss -o HostKeyAlgorithms=ssh-dss"


def ScpSourceIntoVM(port):
    return util.Interpolate(
        "= scp -P "
        + port
        + " "
        + kvm_scpopt
        + " /mnt/packages/%(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz buildbot@localhost:buildbot/build"
    )


def getMTR(**kwargs):
    return steps.MTR(
        dbpool=mtrDbPool,
        warningPattern="MTR's internal check of the test case '.*' failed|Failing test\(s\):.*|\*\*\*Warnings generated in error logs.*|Test warning:.*",
        **kwargs
    )


def getBintarFactory(
    name,
    kvm_image,
    cpu,
    ramdisk=True,
    catg="main",
    suffix="",
    port="10000",
):
    bin_fact = util.BuildFactory()

    args = [
        "--port=" + port,
        "--memory=" + memory_def(),
        "--user=buildbot",
        "--cpu=" + cpu,
        "--smp=8",
        "--logfile=kernel_" + port + ".log",
    ]
    if ramdisk:
        args.append("--work-image=/dev/shm/vm-tmp-" + port + ".qcow2")

    kvm_image_test = kvm_image.replace("vm-centos5", "vm-centos6")

    arch = "x86_64" if "amd64" in name else "i686"

    # Step 1: Cleaning build directory
    bin_fact.addStep(
        steps.ShellCommand(
            description=["cleaning", "build", "dir"],
            command=["sh", "-c", "rm -Rf ../build/*"],
        )
    )

    # Step 2: Downloading source tarball (Adapt this to your source download mechanism)
    bin_fact.addStep(downloadSourceTarball())

    # Custom Compile Step
    # Step 5: Compile (Simplified example, adapt as needed)
    bin_fact.addStep(
        steps.Compile(
            description=["making", "bintar"],
            descriptionDone=["make", "bintar"],
            timeout=3600,
            logfiles={"kernel": "kernel_" + port + ".log"},
            warningPattern=gccWarningPattern,
            env={"TERM": "vt102"},
            command=["runvm"]
            + args
            + [
                "--base-image=/kvm/vms/" + kvm_image + "-build.qcow2",
                "vm-tmp-" + port + ".qcow2",
                "rm -Rf buildbot && mkdir -p buildbot/build",
                ScpSourceIntoVM(port),
                util.Interpolate(
                    "cd buildbot/build && tar -xzf %(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz --strip-components=1 && rm %(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz"
                ),
                util.Interpolate(read_template("bintar_compile")),
                util.Interpolate(
                    "= scp -P "
                    + port
                    + " "
                    + kvm_scpopt
                    + " 'buildbot@localhost:buildbot/build/mariadb-*.tar.gz' ."
                ),
                "= scp -P "
                + port
                + " "
                + kvm_scpopt
                + " buildbot@localhost:buildbot/bindistname.txt .",
            ],
        )
    )

    bin_fact.addStep(
        steps.Test(
            name="providers",
            description=["checking", "compression", "providers"],
            descriptionDone=["check", "compression", "providers"],
            timeout=1200,
            env={"TERM": "vt102"},
            command=["runvm"]
            + args
            + [
                "--logfile=kernel_" + port + ".log",
                "vm-tmp-" + port + ".qcow2",
                util.Interpolate(read_template("bintar_providers")),
            ],
        )
    )

    bin_fact.addStep(
        steps.SetPropertyFromCommand(
            command=["cat", "bindistname.txt"],
            property="bindistname",
        )
    )
    bin_fact.addStep(
        steps.ShellCommand(
            name="save_packages",
            timeout=7200,
            haltOnFailure=True,
            command=util.Interpolate(
                "mkdir -p "
                + "/packages/"
                + "%(prop:tarbuildnum)s"
                + "/"
                + "%(prop:buildername)s"
                + " && sha256sum %(prop:bindistname)s >> sha256sums.txt  && cp "
                + "%(prop:bindistname)s sha256sums.txt"
                + " /packages/"
                + "%(prop:tarbuildnum)s"
                + "/"
                + "%(prop:buildername)s"
                + "/"
                + " && sync /packages/"
                + "%(prop:tarbuildnum)s"
            ),
            doStepIf=savePackage,
        )
    )

    bin_fact.addStep(
        getMTR(
            name="mtr",
            description=["testing", "bintar"],
            descriptionDone=["test", "bintar"],
            logfiles={"kernel": "kernel_" + port + ".log"},
            mtr_subdir=".",  # Where we scp vardir to
            env={"TERM": "vt102"},
            command=["runvm"]
            + args
            + [
                "--base-image=/kvm/vms/" + kvm_image_test + "-install.qcow2",
                "vm-tmp-" + port + ".qcow2",
                "rm -Rf buildbot && mkdir buildbot",
                util.Interpolate(
                    "= scp -P "
                    + port
                    + " "
                    + kvm_scpopt
                    + " %(prop:bindistname)s.tar.gz buildbot@localhost:buildbot/"
                ),
                util.Interpolate(read_template("bintar_mtr")),
                util.Interpolate(
                    "! sudo chmod -R go+rX /usr/local/%(prop:bindistname)s/mysql-test/var/ || :"
                ),
                util.Interpolate(
                    "!= scp -rp -P "
                    + port
                    + " "
                    + kvm_scpopt
                    + " buildbot@localhost:/usr/local/%(prop:bindistname)s/mysql-test/var/ . || :"
                ),
            ],
        )
    )

    bin_fact.addStep(
        getMTR(
            name="mtr-rocksdb",
            description=["testing", "rocksdb"],
            descriptionDone=["test", "rocksdb"],
            logfiles={"kernel": "kernel_" + port + ".log"},
            mtr_subdir=".",  # Where we scp vardir to
            env={"TERM": "vt102"},
            command=["runvm"]
            + args
            + [
                "vm-tmp-" + port + ".qcow2",
                util.Interpolate(read_template("bintar_mtr_rocksdb")),
                util.Interpolate(
                    "! sudo chmod -R go+rX /usr/local/%(prop:bindistname)s/mysql-test/var/ || :"
                ),
                util.Interpolate(
                    "!= scp -rp -P "
                    + port
                    + " "
                    + kvm_scpopt
                    + " buildbot@localhost:/usr/local/%(prop:bindistname)s/mysql-test/var/ . || :"
                ),
            ],
        )
    )

    return bin_fact


####### BUILDERS LIST

c["builders"] = []

builder_definitions = {
    "ubuntu-1210": "quantal",
    "ubuntu-1604": "trusty",
    "centos-6": "centos6",
}

current_port = 10000
for b in builder_definitions:
    for arch in ["amd64", "i386"]:
        if arch == "i386":
            builder_name = "x86"
        else:
            builder_name = arch

    f = getBintarFactory(
        name=builder_name + "-kvm-" + b + "-bintar",
        kvm_image="vm-" + builder_definitions[b] + "-" + arch,
        cpu="host",
        ramdisk=False,
        port=str(current_port),
    )
    current_port += 1

    c["builders"].append(
        util.BuilderConfig(
            name=builder_name + "-kvm-" + b + "-bintar",
            workernames=[os.getenv("MASTER_NONLATENT_BINTARS_WORKER", default="monty-bbw1-x64")],
            factory=f,
        )
    )

c["logEncoding"] = "utf-8"

c["multiMaster"] = True

c["mq"] = {  # Need to enable multimaster aware mq. Wamp is the only option for now.
    "type": "wamp",
    "router_url": os.getenv("MQ_ROUTER_URL", default="ws://localhost:8085/ws"),
    "realm": "realm1",
    # valid are: none, critical, error, warn, info, debug, trace
    "wamp_debug_level": "info",
}
