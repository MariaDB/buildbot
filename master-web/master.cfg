# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from buildbot.process.properties import Property, Properties
from buildbot.steps.shell import ShellCommand, Compile, Test, SetPropertyFromCommand
from buildbot.steps.mtrlogobserver import MTR, MtrLogObserver
from buildbot.steps.source.github import GitHub
from buildbot.process.remotecommand import RemoteCommand
from twisted.internet import defer
import os
import sys
import docker
from datetime import timedelta

sys.setrecursionlimit(10000)

sys.path.append(os.getcwd() + '/..')
from constants import *

c = BuildmasterConfig = {}

# Load the slave, database passwords and 3rd-party tokens from an external
# private file, so that the rest of the configuration can be public.
config = { "private": { } }
exec(open("../master-private.cfg").read(), config, { })

####### PROJECT IDENTITY

c['title'] = "MariaDB CI"
c['titleURL'] = "https://github.com/MariaDB/server"
c['buildbotURL'] = "https://buildbot.dev.mariadb.org/"

# minimalistic config to activate web UI
c['www'] = dict(port=8010, plugins=dict(waterfall_view={}, console_view={}, grid_view={}), custom_templates_dir='templates')

# Github Auth, allow control for MariaDB affiliated accounts
c['www']['authz'] = util.Authz(
  allowRules=[
    util.AnyControlEndpointMatcher(role="MariaDB", defaultDeny=True)
  ],
  roleMatchers=[
    util.RolesFromGroups()
  ]
)
c['www']['auth'] = util.GitHubAuth(config["private"]["gh_mdbauth"]["client"], config["private"]["gh_mdbauth"]["secret"])

# Sponsor plugin
exec(open("../sponsor.py").read())

####### DB URL
c['db'] = {
    'db_url' : config["private"]["db_url"]
}

####### Disable net usage reports from being sent to buildbot.net
c['buildbotNetUsageData'] = None

####### GitHub hooks

# GitHub webhook receiver
c['www']['change_hook_dialects'] = {
        'github': {
                'secret': config["private"]["gh_secret"],
                'strict': True,
        }
}

c['www']['ui_default_config'] = {
    'Grid.changeFetchLimit': 5,
    'Grid.buildFetchLimit': 50,
}

c['logEncoding'] = 'utf-8'

c['multiMaster'] = True

# Need to enable multimaster aware mq. Wamp is the only option for now.
c['mq'] = {
    'type' : 'wamp',
    'router_url': 'ws://crossbar:8080/ws',
    'realm': 'realm1',
    # valid are: none, critical, error, warn, info, debug, trace
    'wamp_debug_level' : 'info'
}

# git branch filter using fnmatch
import fnmatch
def upstream_branch_fn(branch):
    return branch in branches_main or fnmatch.fnmatch(branch, 'bb-*') or fnmatch.fnmatch(branch, 'st-*') or fnmatch.fnmatch(branch, 'prot-*') or fnmatch.fnmatch(branch, "refs/pull/*") or fnmatch.fnmatch(branch, "preview-*")
def staging_branch_fn(branch):
    return fnmatch.fnmatch(branch, 'st-*')
def fnmatch_any(s, list_of_patterns):
    return any(fnmatch.fnmatch(s, p) for p in list_of_patterns)

c['schedulers'] = []

# upstream scheduling
schedulerTarball = schedulers.AnyBranchScheduler(
        name="s_upstream_tarball",
        change_filter=util.ChangeFilter(repository="https://github.com/MariaDB/server", branch_fn=upstream_branch_fn),
        treeStableTimer=60,
        builderNames=["tarball-docker"])
c['schedulers'].append(schedulerTarball)

# Other schedulers
# github.com/cvicentiu/server
c['schedulers'].append(schedulers.SingleBranchScheduler( name="s_vicentiu",
    change_filter=util.ChangeFilter(repository="https://github.com/cvicentiu/server", branch_fn=upstream_branch_fn),
    treeStableTimer=60,
    builderNames=["tarball-docker"]))

# github.com/fauust/mariadb-server
c['schedulers'].append(schedulers.SingleBranchScheduler( name="s_fauust",
    change_filter=util.ChangeFilter(repository="https://github.com/fauust/mariadb-server", branch_fn=upstream_branch_fn),
    treeStableTimer=60,
    builderNames=["tarball-docker"]))
