# -*- python -*-
# ex: set filetype=python:

# git branch filter using fnmatch
import os

from buildbot.plugins import schedulers, util
from flask import Flask, render_template
from master_common import base_master_config
from utils import upstream_branch_fn

cfg_dir = os.path.abspath(os.path.dirname(__file__))

# Non autogen master. For now the directory structure is:
# <srcdir>
# └── <master-name>
#     ├── buildbot.tac
#     └── master.cfg
#
# Non autogen masters load from <srcdir> for now.
base_dir = os.path.abspath(f"{cfg_dir}/../")

# Load the slave, database passwords and 3rd-party tokens from an external private file, so
# that the rest of the configuration can be public.
config = {"private": {}}
with open(os.path.join(base_dir, "master-private.cfg"), "r") as file:
    exec(file.read(), config, {})


c = BuildmasterConfig = base_master_config(config)


# No slaves connect to this master, only meant for WEB.
c["protocols"] = {}
# minimalistic config to activate web UI
c["www"] = {
    "port": os.environ["PORT"],
    "plugins": {
        "waterfall_view": {},
        "console_view": {},
        "grid_view": {},
    },
    "custom_templates_dir": os.path.join(cfg_dir, "templates"),
}

# Github Auth, allow control for MariaDB affiliated accounts
c["www"]["authz"] = util.Authz(
    allowRules=[util.AnyControlEndpointMatcher(role="MariaDB", defaultDeny=True)],
    roleMatchers=[util.RolesFromGroups()],
)
c["www"]["auth"] = util.GitHubAuth(
    config["private"]["gh_mdbauth"]["client"], config["private"]["gh_mdbauth"]["secret"]
)

# Sponsor plugin
sponsorapp = Flask("Sponsors", root_path=os.path.dirname(__file__))
# this allows to work on the template without having to restart Buildbot
sponsorapp.config["TEMPLATES_AUTO_RELOAD"] = True


@sponsorapp.route("/index.html")
def main():
    # sponsor.html is a template inside the template directory
    return render_template("sponsor.html")


c["www"]["plugins"]["wsgi_dashboards"] = (
    [  # This is a list of dashboards, you can create several
        {
            "name": "sponsor",  # as used in URLs
            "caption": "Sponsors",  # Title displayed in the UI'
            "app": sponsorapp,
            # priority of the dashboard in the left menu (lower is higher in the
            # menu)
            "order": 20,
            # available icon list can be found at http://fontawesome.io/icons/
            "icon": "share-alt-square",
        }
    ]
)


####### GitHub hooks

# GitHub webhook receiver
c["www"]["change_hook_dialects"] = {
    "github": {
        "secret": config["private"]["gh_secret"],
        "strict": True,
    }
}

c["www"]["ui_default_config"] = {
    "Grid.changeFetchLimit": 5,
    "Grid.buildFetchLimit": 50,
}


# Override schedulers
c["schedulers"] = []

# upstream scheduling
schedulerTarball = schedulers.AnyBranchScheduler(
    name="s_upstream_tarball",
    change_filter=util.ChangeFilter(
        repository="https://github.com/MariaDB/server", branch_fn=upstream_branch_fn
    ),
    treeStableTimer=60,
    builderNames=["tarball-docker"],
)
c["schedulers"].append(schedulerTarball)

if os.environ["ENVIRON"] == "DEV":
    schedulerTarball = schedulers.AnyBranchScheduler(
        name="s_faust_tarball",
        change_filter=util.ChangeFilter(
            repository="https://github.com/fauust/mariadb-server",
            branch_fn=upstream_branch_fn,
        ),
        treeStableTimer=60,
        builderNames=["tarball-docker"],
    )
    c["schedulers"].append(schedulerTarball)
