# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from buildbot.process.properties import Property, Properties
from buildbot.steps.shell import ShellCommand, Compile, Test, SetPropertyFromCommand
from buildbot.steps.mtrlogobserver import MTR, MtrLogObserver
from buildbot.steps.source.github import GitHub
from buildbot.process.remotecommand import RemoteCommand
from twisted.internet import defer
import sys
import docker
from datetime import timedelta

sys.setrecursionlimit(10000)

from common_factories import *
from constants import *
from locks import *
from schedulers_definition import *
from utils import *

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Load the slave, database passwords and 3rd-party tokens from an external private file, so
# that the rest of the configuration can be public.
config = { "private": { } }
exec(open("master-private.cfg").read(), config, { })

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.


c['services'] = []
context = util.Interpolate("buildbot/%(prop:buildername)s")
gs = reporters.GitHubStatusPush(token=config["private"]["gh_mdbci"]["access_token"],
                                context=context,
                                startDescription='Build started.',
                                endDescription='Build done.',
                                verbose=True,
                                builders=github_status_builders)
c['services'].append(gs)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').
c['title'] = "MariaDB CI"
c['titleURL'] = "https://github.com/MariaDB/server"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "https://buildbot.mariadb.org/"

# Custom plugin
# exec(open("grid.py").read())

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9992}}

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    'db_url' : config["private"]["db_url"]
}

mtrDbPool = util.EqConnectionPool("MySQLdb", config["private"]["db_host"], config["private"]["db_user"], config["private"]["db_password"], config["private"]["db_mtr_db"])

####### Disable net usage reports from being sent to buildbot.net
c['buildbotNetUsageData'] = None

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.
c['schedulers'] = getSchedulers()

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = []

# Docker workers

workers={}
def addWorker(worker_name_prefix, worker_id, worker_type, dockerfile, jobs=5, save_packages=False, shm_size='15G'):
    worker_name = worker_name_prefix + str(worker_id) + '-docker'
    name = worker_name + worker_type

    i = worker_id
    tls = None
    #if worker_name_prefix.startswith('aarch64'):
    #    tls = docker.tls.TLSConfig(verify=True, ca_cert='/srv/buildbot/tlscerts/ca-arm-bbw' + str(i)+ '.pem', client_cert=('/srv/buildbot/tlscerts/cert-arm-bbw' + str(i) + '.pem', '/srv/buildbot/tlscerts/key-arm-bbw' + str(i) + '.pem'))
    #else:
    #    tls = None

    if worker_name_prefix.startswith('hz'):
        b_name = 'x64-bbw'
    elif worker_name_prefix.startswith('intel'):
        b_name = 'x64-bbw'
    elif worker_name_prefix.startswith('p9'):
        b_name = 'p9-bbw'
    elif worker_name_prefix.startswith('amd'):
        b_name = 'x64-bbw'
    else:
        b_name = worker_name_prefix
    base_name = b_name + '-docker' + worker_type

    if base_name not in workers:
        workers[base_name] = [name]
    else:
        workers[base_name].append(name)

    volumes=['/srv/buildbot/ccache:/mnt/ccache', '/srv/buildbot/packages:/mnt/packages', '/mnt/autofs/master_packages/:/packages']
    # Set master FQDN - for VPN machines it should be 100.64.100.1
    fqdn = 'buildbot.mariadb.org'
    if worker_name_prefix.startswith('intel') or worker_name_prefix.startswith('bg') or worker_name_prefix.startswith('amd'):
        fqdn = '100.64.100.1'
    if worker_name_prefix.startswith('p9-rhel'):
        fqdn = '10.103.203.6'
    if 'vladbogo' in dockerfile or 'quay' in dockerfile:
        dockerfile_str = None
        image_str = dockerfile
        need_pull = True
    else:
        dockerfile_str = open("dockerfiles/" + dockerfile).read()
        image_str = None
        need_pull = False
    if 'rhel' in worker_type and dockerfile_str is not None and not 'download' in dockerfile:
        dockerfile_str = dockerfile_str % (config["private"]["rhel_sub"]["user"], config["private"]["rhel_sub"]["password"])
    c['workers'].append(worker.DockerLatentWorker(name, None,
                        docker_host=config["private"]["docker_workers"][worker_name],
                        image=image_str,
                        dockerfile=dockerfile_str,
                        tls=tls,
                        autopull=True,
                        alwaysPull=need_pull,
                        followStartupLogs=False,
                        masterFQDN=fqdn,
                        build_wait_timeout=0,
                        missing_timeout=600,
                        max_builds=1,
                        hostconfig={ 'shm_size':shm_size},
                        volumes=volumes,
                        properties={ 'jobs':jobs, 'save_packages':save_packages }))


for w_name in ['hz-bbw', 'intel-bbw', 'amd-bbw']:
    if w_name.startswith('hz'):
        jobs = 7
    else:
        jobs = 15
    if w_name == 'hz-bbw':
        for i in [2, 5]:
            addWorker(w_name, i, '-debian-sid', 'quay.io/mariadb-foundation/bb-worker:debiansid', jobs=jobs, save_packages=True)
            addWorker(w_name, i, '-debian-sid-i386', 'quay.io/mariadb-foundation/bb-worker:debiansid-386', jobs=jobs, save_packages=True)
            addWorker(w_name, i, '-ubuntu-1804', 'quay.io/mariadb-foundation/bb-worker:ubuntu18.04', jobs=jobs, save_packages=True)
            addWorker(w_name, i, '-sles-12', 'sles-12-download.dockerfile', jobs=jobs, save_packages=True)
            addWorker(w_name, i, '-sles-15', 'sles-15-download.dockerfile', jobs=jobs, save_packages=True)
            addWorker(w_name, i, '-valgrind-ubuntu-1804', "valgrind-ubuntu-1804.dockerfile", jobs=jobs, save_packages=False)
            addWorker(w_name, i, '-icc-ubuntu-1804', "vladbogo/bb:icc-ubuntu-1804", jobs=jobs, save_packages=False)
            addWorker(w_name, i, '-rhel-7', 'quay.io/mariadb-foundation/bb-worker:rhel7', jobs=jobs, save_packages=True)
            addWorker(w_name, i, '-ubuntu-2204', "quay.io/mariadb-foundation/bb-worker:ubuntu22.04",jobs=jobs, save_packages=True)
            addWorker(w_name, i, '-opensuse-15', 'opensuse-15.dockerfile', jobs=jobs, save_packages=True)
            addWorker(w_name, i, '-clang-ubuntu-1804', "clang-ubuntu-1804.dockerfile", jobs=jobs, save_packages=True)
            addWorker(w_name, i, '-ubuntu-2004', 'quay.io/mariadb-foundation/bb-worker:ubuntu20.04', jobs=jobs, save_packages=True)
        for i in [1, 4]:
            addWorker(w_name, i, '-debian-11', 'quay.io/mariadb-foundation/bb-worker:debian11', jobs=jobs, save_packages=True)
            addWorker(w_name, i, '-fedora-36', 'quay.io/mariadb-foundation/bb-worker:fedora36', jobs=jobs, save_packages=True)
            addWorker(w_name, i, '-rhel-8', 'quay.io/mariadb-foundation/bb-worker:rhel8', jobs=jobs, save_packages=True)
            addWorker(w_name, i, '-rhel-9', 'quay.io/mariadb-foundation/bb-worker:rhel9', jobs=jobs, save_packages=True)

    if w_name == 'intel-bbw' or w_name == 'amd-bbw':
        i=1
        addWorker(w_name, i, '-ubuntu-2004', 'quay.io/mariadb-foundation/bb-worker:ubuntu20.04', jobs=jobs, save_packages=True)
        addWorker(w_name, i, '-debian-sid', 'quay.io/mariadb-foundation/bb-worker:debiansid', jobs=jobs, save_packages=True)
        addWorker(w_name, i, '-debian-sid-i386', 'quay.io/mariadb-foundation/bb-worker:debiansid-386', jobs=jobs, save_packages=True)
        addWorker(w_name, i, '-ubuntu-1804', 'quay.io/mariadb-foundation/bb-worker:ubuntu18.04', jobs=jobs, save_packages=True)
        addWorker(w_name, i, '-sles-12', 'sles-12-download.dockerfile', jobs=jobs, save_packages=True)
        addWorker(w_name, i, '-sles-15', 'sles-15-download.dockerfile', jobs=jobs, save_packages=True)
        addWorker(w_name, i, '-valgrind-ubuntu-1804', "valgrind-ubuntu-1804.dockerfile", jobs=jobs, save_packages=False)
        addWorker(w_name, i, '-icc-ubuntu-1804', "vladbogo/bb:icc-ubuntu-1804", jobs=jobs, save_packages=False)
        addWorker(w_name, i, '-rhel-7', 'quay.io/mariadb-foundation/bb-worker:rhel7', jobs=jobs, save_packages=True)
        addWorker(w_name, i, '-ubuntu-2204', "quay.io/mariadb-foundation/bb-worker:ubuntu22.04", jobs=jobs, save_packages=True)
        addWorker(w_name, i, '-opensuse-15', 'opensuse-15.dockerfile', jobs=jobs, save_packages=True)
        addWorker(w_name, i, '-clang-ubuntu-1804', "clang-ubuntu-1804.dockerfile", jobs=jobs, save_packages=True)

## Add Power workers
for w_name in ['p9-rhel8-bbw', 'p9-rhel7-bbw', 'p9-db-bbw']:
    jobs = 12
    addWorker(w_name, 1, '-ubuntu-1804', 'quay.io/mariadb-foundation/bb-worker:ubuntu18.04', jobs=jobs, save_packages=True, shm_size='20G')
    addWorker(w_name, 1, '-ubuntu-2004', 'quay.io/mariadb-foundation/bb-worker:ubuntu20.04', jobs=jobs, save_packages=True, shm_size='20G')
    # Disable other workers for Ubuntu 22.04 ppc until MDBF-357 is fixed
    if w_name == 'p9-rhel8-bbw':
        addWorker(w_name, 1, '-ubuntu-2204', 'quay.io/mariadb-foundation/bb-worker:ubuntu22.04', jobs=jobs, save_packages=True, shm_size='20G')
        addWorker(w_name, 1, '-debian-sid', 'quay.io/mariadb-foundation/bb-worker:debiansid', jobs=jobs, save_packages=True, shm_size='20G')
    addWorker(w_name, 1, '-debian-10', 'quay.io/mariadb-foundation/bb-worker:debian10', jobs=jobs, save_packages=True, shm_size='20G')
    addWorker(w_name, 1, '-debian-11', 'quay.io/mariadb-foundation/bb-worker:debian11', jobs=jobs, save_packages=True, shm_size='20G')
    addWorker(w_name, 1, '-clang-ubuntu-2004', 'vladbogo/bb:ppc64le-ubuntu-2004-clang1x',jobs=jobs, save_packages=True, shm_size='20G')
    addWorker(w_name, 1, '-rhel-8', 'quay.io/mariadb-foundation/bb-worker:rhel8', jobs=jobs, save_packages=True, shm_size='20G')
    addWorker(w_name, 1, '-rhel-9', 'quay.io/mariadb-foundation/bb-worker:rhel9', jobs=jobs, save_packages=True, shm_size='20G')

## bg-bbw-docker
for i in range(1,5):
    if i == 1:
        jobs = 5
    else:
        jobs = 3

    addWorker('bg-bbw', i, '-clang-ubuntu-1804', "clang-ubuntu-1804.dockerfile", jobs=jobs, save_packages=True)
    addWorker('bg-bbw', i, '-msan-clang-ubuntu-2004', "vladbogo/bb:msan-ubuntu-2004-clang-12", jobs=jobs, save_packages=False)
    addWorker('bg-bbw', i, '-valgrind-ubuntu-1804', "valgrind-ubuntu-1804.dockerfile", jobs=jobs, save_packages=False)
    addWorker('bg-bbw', i, '-fedora-35', "quay.io/mariadb-foundation/bb-worker:fedora35", jobs=jobs, save_packages=True)
    addWorker('bg-bbw', i, '-fedora-36', "quay.io/mariadb-foundation/bb-worker:fedora36", jobs=jobs, save_packages=True)
    addWorker('bg-bbw', i, '-opensuse-15', "opensuse-15.dockerfile", jobs=jobs, save_packages=True)
    addWorker('bg-bbw', i, '-centos-stream8', "quay.io/mariadb-foundation/bb-worker:centos-stream8", jobs=jobs, save_packages=True)
    addWorker('bg-bbw', i, '-x86-ubuntu-1804', "quay.io/mariadb-foundation/bb-worker:ubuntu18.04-386", jobs=jobs, save_packages=False)
    addWorker('bg-bbw', i, '-ubuntu-2004', 'quay.io/mariadb-foundation/bb-worker:ubuntu20.04', jobs=jobs, save_packages=True)
    addWorker('bg-bbw', i, '-debian-10', 'quay.io/mariadb-foundation/bb-worker:debian10', jobs=jobs, save_packages=True)
    addWorker('bg-bbw', i, '-rhel-8', 'quay.io/mariadb-foundation/bb-worker:rhel8', jobs=jobs, save_packages=True)
    addWorker('bg-bbw', i, '-rhel-9', 'quay.io/mariadb-foundation/bb-worker:rhel9', jobs=jobs, save_packages=True)
    addWorker('bg-bbw', i, '-centos-7', 'quay.io/mariadb-foundation/bb-worker:centos7', jobs=jobs, save_packages=True)
    addWorker('bg-bbw', i, '-sles-12', 'sles-12-download.dockerfile', jobs=jobs, save_packages=True)
    addWorker('bg-bbw', i, '-sles-15', 'sles-15-download.dockerfile', jobs=jobs, save_packages=True)

# aarch64-bbw-docker
for i in range(1, 6):
    jobs = 4
    if i == 5:
        jobs = 25
    if i == 4:
        jobs = 8

    if i == 5:
        addWorker('aarch64-bbw', i, '-debian-11', "quay.io/mariadb-foundation/bb-worker:debian11", jobs=jobs, save_packages=True)
        addWorker('aarch64-bbw', i, '-debian-sid', "quay.io/mariadb-foundation/bb-worker:debiansid", jobs=jobs, save_packages=True)
        addWorker('aarch64-bbw', i, '-rhel-8', "quay.io/mariadb-foundation/bb-worker:rhel8", jobs=jobs, save_packages=True)
        addWorker('aarch64-bbw', i, '-rhel-9', "quay.io/mariadb-foundation/bb-worker:rhel9", jobs=jobs, save_packages=True)
        addWorker('aarch64-bbw', i, '-fedora-35', "quay.io/mariadb-foundation/bb-worker:fedora35", jobs=jobs, save_packages=True)
        addWorker('aarch64-bbw', i, '-fedora-36', "quay.io/mariadb-foundation/bb-worker:fedora36", jobs=jobs, save_packages=True)
        addWorker('aarch64-bbw', i, '-ubuntu-2004', "quay.io/mariadb-foundation/bb-worker:ubuntu20.04", jobs=jobs, save_packages=True)
        addWorker('aarch64-bbw', i, '-ubuntu-2204', "quay.io/mariadb-foundation/bb-worker:ubuntu22.04", jobs=jobs, save_packages=True)

    if i == 4 or i == 5:
        addWorker('aarch64-bbw', i, '-debian-10', "quay.io/mariadb-foundation/bb-worker:debian10", jobs=jobs, save_packages=True)
    else:
        addWorker('aarch64-bbw', i, '-debian-10', "quay.io/mariadb-foundation/bb-worker:debian10", jobs=jobs, save_packages=True)
        addWorker('aarch64-bbw', i, '-ubuntu-1804', "quay.io/mariadb-foundation/bb-worker:ubuntu18.04", jobs=jobs, save_packages=True)

    if i == 2 or i == 5:
        addWorker('aarch64-bbw', i, '-centos-stream8', "quay.io/mariadb-foundation/bb-worker:centos-stream8", jobs=8, save_packages=True)

# add s390x workers
for i in [1,2,3]:
    addWorker('s390x-bbw', i, '-ubuntu-2004', "quay.io/mariadb-foundation/bb-worker:ubuntu20.04", jobs=8, save_packages=True)
    addWorker('s390x-bbw', i, '-ubuntu-2204', "quay.io/mariadb-foundation/bb-worker:ubuntu22.04", jobs=8, save_packages=True)
    addWorker('s390x-bbw', i, '-rhel-8', "vladbogo/bb:s390x-rhel-8", jobs=8, save_packages=True)
    addWorker('s390x-bbw', i, '-rhel-9', "quay.io/mariadb-foundation/bb-worker:rhel9", jobs=jobs, save_packages=True)
    addWorker('s390x-bbw', i, '-sles-15', "vladbogo/bb:s390x-sles-15", jobs=8, save_packages=True)

####### FACTORY CODE

def dpkgDeb():
    return ShellCommand(
            name="dpkg-scanpackages/sources",
            haltOnFailure=True,
            command=["sh", "-xc", util.Interpolate("""
    mkdir -p debs/
    find .. -maxdepth 1 -type f -exec cp {} debs/ \;
    cd debs
    ( dpkg-scanpackages . /dev/null && dpkg-scanpackages --type ddeb . /dev/null  )| gzip -9c > Packages.gz
    dpkg-scansources . /dev/null | gzip -9c > Sources.gz
    cd ..
    find debs -type f -exec sha256sum {} \; | sort > sha256sums.txt
""")], doStepIf=lambda step: hasFiles(step) and savePackage(step))


f_quick_build = getQuickBuildFactory(mtrDbPool)
f_rpm_autobake = getRpmAutobakeFactory(mtrDbPool)

## f_deb_autobake
f_deb_autobake = util.BuildFactory()
f_deb_autobake.addStep(steps.SetProperty(property="dockerfile", value=util.Interpolate("%(kw:url)s", url=dockerfile), description="dockerfile"))
f_deb_autobake.addStep(downloadSourceTarball())
f_deb_autobake.addStep(steps.ShellCommand(command=util.Interpolate("tar -xvzf /mnt/packages/%(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz --strip-components=1")))
# build steps
f_deb_autobake.addStep(steps.Compile(logfiles={'CMakeCache.txt': './builddir/CMakeCache.txt'}, command=["debian/autobake-deb.sh"],
    env={'CCACHE_DIR':'/mnt/ccache', 'DEB_BUILD_OPTIONS':util.Interpolate('parallel=%(kw:jobs)s', jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))}, description="autobake-deb.sh"))
# upload binaries
f_deb_autobake.addStep(steps.SetPropertyFromCommand(command="find .. -maxdepth 1 -type f", extract_fn=ls2string))
#f_deb_autobake.addStep(steps.MultipleFileUpload(workersrcs=util.Property('packages'),
#    masterdest=util.Interpolate('/srv/buildbot/packages/' + '%(prop:tarbuildnum)s' + '/' + '%(prop:buildername)s'), mode=0o755, url=util.Interpolate('https://ci.mariadb.org/' + "%(prop:tarbuildnum)s" + "/" + '%(prop:buildername)s' + "/"), doStepIf=lambda step: hasFiles(step) and savePackage(step)))
#f_deb_autobake.addStep(steps.ShellCommand(name='save_packages', haltOnFailure=True, command=util.Interpolate('mkdir -p ' + '/packages/' + '%(prop:tarbuildnum)s' + '/' + '%(prop:buildername)s'+ ' && cp ' + '%(prop:packages)s' + ' /packages/' + '%(prop:tarbuildnum)s' + '/' + '%(prop:buildername)s' + '/' +  ' && sync /packages/' + '%(prop:tarbuildnum)s'), doStepIf=lambda step: hasFiles(step) and savePackage(step)))
f_deb_autobake.addStep(dpkgDeb())
#f_deb_autobake.addStep(steps.MultipleFileUpload(workersrcs=['debs/Packages.gz', 'debs/Sources.gz'],
#    masterdest=util.Interpolate('/srv/buildbot/packages/' + '%(prop:tarbuildnum)s' + '/' + '%(prop:buildername)s'), mode=0o755, url=util.Interpolate('https://ci.mariadb.org/' + "%(prop:tarbuildnum)s" + "/" + '%(prop:buildername)s' + "/"), doStepIf=lambda step: hasFiles(step) and savePackage(step)))
f_deb_autobake.addStep(steps.ShellCommand(name='save_packages', timeout=7200, haltOnFailure=True, command=util.Interpolate('mkdir -p ' + '/packages/' + '%(prop:tarbuildnum)s' + '/' + '%(prop:buildername)s'+ ' && cp -r debs/ sha256sums.txt /packages/' + '%(prop:tarbuildnum)s' + '/' + '%(prop:buildername)s' + '/' +  ' && sync /packages/' + '%(prop:tarbuildnum)s'), doStepIf=lambda step: hasFiles(step) and savePackage(step)))
f_deb_autobake.addStep(steps.Trigger(name='dockerlibrary', schedulerNames=['s_dockerlibrary'], waitForFinish=False, updateSourceStamp=False,
    set_properties={"tarbuildnum" : Property("tarbuildnum"), "mariadb_version" : Property("mariadb_version"), "master_branch" : Property("master_branch"), "parentbuildername": Property("buildername")}, doStepIf=lambda step: hasDockerLibrary(step)))
f_deb_autobake.addStep(steps.Trigger(name='install', schedulerNames=['s_install'], waitForFinish=False, updateSourceStamp=False,
    set_properties={"tarbuildnum" : Property("tarbuildnum"), "mariadb_version" : Property("mariadb_version"), "master_branch" : Property("master_branch"), "parentbuildername": Property("buildername"), "sst_mode": "off"}, doStepIf=lambda step: hasInstall(step) and savePackage(step) and hasFiles(step)))
f_deb_autobake.addStep(steps.Trigger(name='galera-sst-mariabackup', schedulerNames=['s_install'], waitForFinish=False, updateSourceStamp=False,
    set_properties={"tarbuildnum" : Property("tarbuildnum"), "mariadb_version" : Property("mariadb_version"), "master_branch" : Property("master_branch"), "parentbuildername": Property("buildername"), "sst_mode": "mariabackup"}, doStepIf=lambda step: hasInstall(step) and savePackage(step) and hasFiles(step)))
f_deb_autobake.addStep(steps.Trigger(name='galera-sst-mysqldump', schedulerNames=['s_install'], waitForFinish=False, updateSourceStamp=False,
    set_properties={"tarbuildnum" : Property("tarbuildnum"), "mariadb_version" : Property("mariadb_version"), "master_branch" : Property("master_branch"), "parentbuildername": Property("buildername"), "sst_mode": "mysqldump"}, doStepIf=lambda step: hasInstall(step) and savePackage(step) and hasFiles(step)))
f_deb_autobake.addStep(steps.Trigger(name='galera-sst-rsync', schedulerNames=['s_install'], waitForFinish=False, updateSourceStamp=False,
    set_properties={"tarbuildnum" : Property("tarbuildnum"), "mariadb_version" : Property("mariadb_version"), "master_branch" : Property("master_branch"), "parentbuildername": Property("buildername"), "sst_mode": "rsync"}, doStepIf=lambda step: hasInstall(step) and savePackage(step) and hasFiles(step)))
f_deb_autobake.addStep(steps.Trigger(name='major-minor-upgrade', schedulerNames=['s_upgrade'], waitForFinish=False, updateSourceStamp=False,
    set_properties={"tarbuildnum" : Property("tarbuildnum"), "mariadb_version" : Property("mariadb_version"), "master_branch" : Property("master_branch"), "parentbuildername": Property("buildername")}, doStepIf=lambda step: hasUpgrade(step) and savePackage(step) and hasFiles(step)))
f_deb_autobake.addStep(steps.ShellCommand(name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True))

####### BUILDERS LIST

c['builders'] = []

c['builders'].append(
    util.BuilderConfig(name="amd64-ubuntu-1804",
      workernames=workers["x64-bbw-docker-ubuntu-1804"],
      tags=["Ubuntu", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="amd64-ubuntu-1804-deb-autobake",
      workernames=workers["x64-bbw-docker-ubuntu-1804"],
      tags=["Ubuntu", "deb", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="amd64-ubuntu-2004",
      workernames=workers["x64-bbw-docker-ubuntu-2004"],
      tags=["Ubuntu", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="amd64-ubuntu-1804-icc",
      workernames=workers["x64-bbw-docker-icc-ubuntu-1804"],
      tags=["Ubuntu", "quick", "icc", "icpc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      properties={'c_compiler': 'icc', 'cxx_compiler': 'icpc'},
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="amd64-ubuntu-2004-deb-autobake",
      workernames=workers["bg-bbw-docker-ubuntu-2004"],
      tags=["Ubuntu", "deb", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="s390x-ubuntu-2004",
      workernames=workers["s390x-bbw-docker-ubuntu-2004"],
      tags=["Ubuntu", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="s390x-ubuntu-2004-deb-autobake",
      workernames=workers["s390x-bbw-docker-ubuntu-2004"],
      tags=["Ubuntu", "deb", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="s390x-ubuntu-2204",
      workernames=workers["s390x-bbw-docker-ubuntu-2204"],
      tags=["Ubuntu", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="s390x-ubuntu-2204-deb-autobake",
      workernames=workers["s390x-bbw-docker-ubuntu-2204"],
      tags=["Ubuntu", "deb", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="s390x-rhel-8",
      workernames=workers["s390x-bbw-docker-rhel-8"],
      tags=["RHEL", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="s390x-rhel-8-rpm-autobake",
      workernames=workers["s390x-bbw-docker-rhel-8"],
      tags=["RHEL", "rpm", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      properties={'rpm_type': 'rhel8'},
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="s390x-rhel-9",
      workernames=workers["s390x-bbw-docker-rhel-9"],
      tags=["RHEL", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="s390x-rhel-9-rpm-autobake",
      workernames=workers["s390x-bbw-docker-rhel-9"],
      tags=["RHEL", "rpm", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      properties={'rpm_type': 'rhel9'},
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="s390x-sles-15",
      workernames=workers["s390x-bbw-docker-sles-15"],
      tags=["SLES", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="s390x-sles-15-rpm-autobake",
      workernames=workers["s390x-bbw-docker-sles-15"],
      tags=["SLES", "rpm", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      properties={'rpm_type': 'sles15'},
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="amd64-ubuntu-2204",
      workernames=workers["x64-bbw-docker-ubuntu-2204"],
      tags=["Ubuntu", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="amd64-ubuntu-2204-deb-autobake",
      workernames=workers["x64-bbw-docker-ubuntu-2204"],
      tags=["Ubuntu", "deb", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="amd64-debian-10-deb-autobake",
      workernames=workers["bg-bbw-docker-debian-10"],
      tags=["Debian", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="amd64-debian-11",
      workernames=workers["x64-bbw-docker-debian-11"],
      tags=["Debian", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="amd64-debian-11-deb-autobake",
      workernames=workers["x64-bbw-docker-debian-11"],
      tags=["Debian", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="amd64-debian-sid",
      workernames=workers["x64-bbw-docker-debian-sid"],
      tags=["Debian", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="amd64-debian-sid-deb-autobake",
      workernames=workers["x64-bbw-docker-debian-sid"],
      tags=["Debian", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="x86-debian-sid",
      workernames=workers["x64-bbw-docker-debian-sid-i386"],
      tags=["Debian", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="x86-debian-sid-deb-autobake",
      workernames=workers["x64-bbw-docker-debian-sid-i386"],
      tags=["Debian", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="amd64-rhel-7",
      workernames=workers["x64-bbw-docker-rhel-7"],
      tags=["RHEL", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="amd64-rhel-7-rpm-autobake",
      workernames=workers["x64-bbw-docker-rhel-7"],
      tags=["RHEL", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      properties={'rpm_type': 'rhel7'},
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="amd64-rhel-8",
      workernames=workers["x64-bbw-docker-rhel-8"],
      tags=["RHEL", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="amd64-rhel-8-rpm-autobake",
      workernames=workers["bg-bbw-docker-rhel-8"],
      tags=["RHEL", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      properties={'rpm_type': 'rhel8'},
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="amd64-rhel-9",
      workernames=workers["x64-bbw-docker-rhel-9"],
      tags=["RHEL", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="amd64-rhel-9-rpm-autobake",
      workernames=workers["x64-bbw-docker-rhel-9"],
      tags=["RHEL", "rpm", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      properties={'rpm_type': 'rhel9'},
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="amd64-fedora-35-rpm-autobake",
      workernames=workers["bg-bbw-docker-fedora-35"],
      tags=["Fedora", "rpm", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      properties={'rpm_type': 'fedora35'},
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="amd64-fedora-36",
      workernames=workers["x64-bbw-docker-fedora-36"],
      tags=["Fedora", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="amd64-fedora-36-rpm-autobake",
      workernames=workers["bg-bbw-docker-fedora-36"],
      tags=["Fedora", "rpm", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      properties={'rpm_type': 'fedora36'},
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="amd64-sles-12",
      workernames=workers["x64-bbw-docker-sles-12"],
      tags=["Fedora", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="amd64-sles-12-rpm-autobake",
      workernames=workers["x64-bbw-docker-sles-12"],
      tags=["Fedora", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      properties={'rpm_type': 'sles12'},
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="amd64-sles-15",
      workernames=workers["x64-bbw-docker-sles-15"],
      tags=["Fedora", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="amd64-sles-15-rpm-autobake",
      workernames=workers["x64-bbw-docker-sles-15"],
      tags=["Fedora", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      properties={'rpm_type': 'sles15'},
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="amd64-centos-7-rpm-autobake",
      workernames=workers["bg-bbw-docker-centos-7"],
      tags=["Centos", "rpm", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      properties={'rpm_type': 'centos7'},
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="amd64-centos-stream8",
      workernames=workers["bg-bbw-docker-centos-stream8"],
      tags=["Centos", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="amd64-centos-stream8-rpm-autobake",
      workernames=workers["bg-bbw-docker-centos-stream8"],
      tags=["Centos", "rpm", "bake", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      properties={'rpm_type': 'centos8'},
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="amd64-opensuse-15",
      workernames=workers["x64-bbw-docker-opensuse-15"],
      tags=["OpenSUSE", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="amd64-opensuse-15-rpm-autobake",
      workernames=workers["bg-bbw-docker-opensuse-15"],
      tags=["OpenSUSE", "quick", "gcc"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      properties={'rpm_type': 'opensuse15'},
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="ppc64le-ubuntu-1804",
      workernames=workers["p9-bbw-docker-ubuntu-1804"],
      tags=["Ubuntu", "quick", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="ppc64le-ubuntu-1804-deb-autobake",
      workernames=workers["p9-bbw-docker-ubuntu-1804"],
      tags=["Ubuntu", "deb", "bake", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="ppc64le-ubuntu-2004",
      workernames=workers["p9-bbw-docker-ubuntu-2004"],
      tags=["Ubuntu", "quick", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="ppc64le-ubuntu-2004-deb-autobake",
      workernames=workers["p9-bbw-docker-ubuntu-2004"],
      tags=["Ubuntu", "deb", "bake", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="ppc64le-ubuntu-2204",
      workernames=workers["p9-bbw-docker-ubuntu-2204"],
      tags=["Ubuntu", "quick", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="ppc64le-ubuntu-2204-deb-autobake",
      workernames=workers["p9-bbw-docker-ubuntu-2204"],
      tags=["Ubuntu", "deb", "bake", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="ppc64le-debian-11",
      workernames=workers["p9-bbw-docker-debian-11"],
      tags=["Ubuntu", "quick", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="ppc64le-debian-11-deb-autobake",
      workernames=workers["p9-bbw-docker-debian-11"],
      tags=["Ubuntu", "deb", "bake", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="ppc64le-debian-sid",
      workernames=workers["p9-bbw-docker-debian-sid"],
      tags=["Ubuntu", "quick", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="ppc64le-debian-sid-deb-autobake",
      workernames=workers["p9-bbw-docker-debian-sid"],
      tags=["Ubuntu", "deb", "bake", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="ppc64le-ubuntu-2004-clang1x",
      workernames=workers["p9-bbw-docker-clang-ubuntu-2004"],
      tags=["Ubuntu", "quick", "clang-10", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      properties={'c_compiler': 'clang-10', 'cxx_compiler': 'clang++-10', 'additional_args': '-DWITHOUT_ROCKSDB=True -DWITHOUT_CONNECT=True -DCMAKE_C_FLAGS=-Wno-inconsistent-missing-override -DCMAKE_CXX_FLAGS=-Wno-inconsistent-missing-override'},
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="ppc64le-rhel-8",
      workernames=workers["p9-bbw-docker-rhel-8"],
      tags=["RHEL", "quick", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="ppc64le-rhel-8-rpm-autobake",
      workernames=workers["p9-bbw-docker-rhel-8"],
      tags=["RHEL", "quick", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      properties={'rpm_type': 'rhel8'},
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="ppc64le-rhel-9",
      workernames=workers["p9-bbw-docker-rhel-9"],
      tags=["RHEL", "quick", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="ppc64le-rhel-9-rpm-autobake",
      workernames=workers["p9-bbw-docker-rhel-9"],
      tags=["RHEL", "quick", "gcc", "pc9"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      properties={'rpm_type': 'rhel8'},
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="x86-ubuntu-1804",
      workernames=workers["bg-bbw-docker-x86-ubuntu-1804"],
      tags=["Ubuntu", "quick", "gcc", "32bit"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="aarch64-ubuntu-1804",
      workernames=workers["aarch64-bbw-docker-ubuntu-1804"],
      tags=["Ubuntu", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="aarch64-ubuntu-1804-deb-autobake",
      workernames=workers["aarch64-bbw-docker-ubuntu-1804"],
      tags=["Ubuntu", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="aarch64-ubuntu-2004",
      workernames=workers["aarch64-bbw-docker-ubuntu-2004"],
      tags=["Ubuntu", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="aarch64-ubuntu-2004-deb-autobake",
      workernames=workers["aarch64-bbw-docker-ubuntu-2004"],
      tags=["Ubuntu", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="aarch64-ubuntu-2204",
      workernames=workers["aarch64-bbw-docker-ubuntu-2204"],
      tags=["Ubuntu", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="aarch64-ubuntu-2204-deb-autobake",
      workernames=workers["aarch64-bbw-docker-ubuntu-2204"],
      tags=["Ubuntu", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="aarch64-fedora-35",
      workernames=workers["aarch64-bbw-docker-fedora-35"],
      tags=["Fedora", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="aarch64-fedora-35-rpm-autobake",
      workernames=workers["aarch64-bbw-docker-fedora-35"],
      tags=["Fedora", "rpm", "bake", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      properties={'rpm_type': 'fedora35'},
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="aarch64-fedora-36",
      workernames=workers["aarch64-bbw-docker-fedora-36"],
      tags=["Fedora", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="aarch64-fedora-36-rpm-autobake",
      workernames=workers["aarch64-bbw-docker-fedora-36"],
      tags=["Fedora", "rpm", "bake", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      properties={'rpm_type': 'fedora36'},
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="aarch64-centos-stream8",
      workernames=workers["aarch64-bbw-docker-centos-stream8"],
      tags=["Centos", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="aarch64-centos-stream8-rpm-autobake",
      workernames=workers["aarch64-bbw-docker-centos-stream8"],
      tags=["Centos", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      properties={'rpm_type': 'centos8'},
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="aarch64-debian-10",
      workernames=workers["aarch64-bbw-docker-debian-10"],
      tags=["Debian", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="aarch64-debian-10-deb-autobake",
      workernames=workers["aarch64-bbw-docker-debian-10"],
      tags=["Debian", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="aarch64-debian-11",
      workernames=workers["aarch64-bbw-docker-debian-11"],
      tags=["Debian", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="aarch64-debian-11-deb-autobake",
      workernames=workers["aarch64-bbw-docker-debian-11"],
      tags=["Debian", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="aarch64-debian-sid",
      workernames=workers["aarch64-bbw-docker-debian-sid"],
      tags=["Debian", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="aarch64-debian-sid-deb-autobake",
      workernames=workers["aarch64-bbw-docker-debian-sid"],
      tags=["Debian", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="aarch64-rhel-8",
      workernames=workers["aarch64-bbw-docker-rhel-8"],
      tags=["RHEL", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="aarch64-rhel-8-rpm-autobake",
      workernames=workers["aarch64-bbw-docker-rhel-8"],
      tags=["RHEL", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      properties={'rpm_type': 'rhel8', 'mtr_additional_args': '-DPLUGIN_COLUMNSTORE=NO'},
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="aarch64-rhel-9",
      workernames=workers["aarch64-bbw-docker-rhel-9"],
      tags=["RHEL", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="aarch64-rhel-9-rpm-autobake",
      workernames=workers["aarch64-bbw-docker-rhel-9"],
      tags=["RHEL", "quick", "gcc", "aarch64"],
      collapseRequests=True,
      nextBuild=nextBuild,
      canStartBuild=canStartBuild,
      locks=getLocks,
      properties={'rpm_type': 'rhel9', 'mtr_additional_args': '-DPLUGIN_COLUMNSTORE=NO'},
      factory=f_rpm_autobake))

# Add a Janitor configurator that removes old logs
c['configurators'] = [util.JanitorConfigurator(
    logHorizon=timedelta(weeks=6),
    hour=23
)]

c['logEncoding'] = 'utf-8'

c['multiMaster'] = True

c['mq'] = {  # Need to enable multimaster aware mq. Wamp is the only option for now.
    'type' : 'wamp',
    'router_url': 'ws://buildbot.mariadb.org:8085/ws',
    'realm': 'realm1',
    # valid are: none, critical, error, warn, info, debug, trace
    'wamp_debug_level' : 'info'
}

#### prometheus exporter //TEMP added Faustin
c['services'].append(reporters.Prometheus(port=9101))
