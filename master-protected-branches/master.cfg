# -*- python -*-
# ex: set filetype=python:

import os
from collections import defaultdict

from buildbot.plugins import steps, util, worker
from buildbot.process.properties import Property
from common_factories import getLastNFailedBuildsFactory, getQuickBuildFactory
from locks import getLocks
from master_common import base_master_config
from utils import (
    canStartBuild,
    createWorker,
    isJepsenBranch,
    isStagingBranch,
    ls2list,
    nextBuild,
    waitIfStaging,
)

cfg_dir = os.path.abspath(os.path.dirname(__file__))

# Non autogen master. For now the directory structure is:
# <srcdir>
# └── <master-name>
#     ├── buildbot.tac
#     └── master.cfg
#
# Non autogen masters load from <srcdir> for now.
base_dir = os.path.abspath(f'{cfg_dir}/../')

# Load the slave, database passwords and 3rd-party tokens from an external private file, so
# that the rest of the configuration can be public.
config = {"private": {}}
with open(os.path.join(base_dir, "master-private.cfg"), "r") as file:
    exec(file.read(), config, {})

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = base_master_config(config)

mtrDbPool = util.EqConnectionPool(
    "MySQLdb",
    config["private"]["db_host"],
    config["private"]["db_user"],
    config["private"]["db_password"],
    config["private"]["db_mtr_db"],
)

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c["workers"] = []

# Docker workers
FQDN = os.environ["BUILDMASTER_WG_IP"]
MASTER_PACKAGES = os.environ["MASTER_PACKAGES_DIR"]

## hz-bbw2-docker
c["workers"].append(
    worker.DockerLatentWorker(
        "hz-bbw1-docker-tarball-debian-12",
        None,
        docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
        image=os.environ["CONTAINER_REGISTRY_URL"] + "debian12",
        followStartupLogs=False,
        autopull=True,
        alwaysPull=True,
        masterFQDN=FQDN,
        hostconfig={"shm_size": "1G"},
        volumes=[MASTER_PACKAGES + "/:/packages"],
        max_builds=1,
        build_wait_timeout=0,
        properties={"jobs": 4, "save_packages": True},
    )
)

c["workers"].append(
    worker.DockerLatentWorker(
        "hz-bbw4-docker-tarball-debian-12",
        None,
        docker_host=config["private"]["docker_workers"]["hz-bbw4-docker"],
        image=os.environ["CONTAINER_REGISTRY_URL"] + "debian12",
        followStartupLogs=False,
        autopull=True,
        alwaysPull=True,
        masterFQDN=FQDN,
        hostconfig={"shm_size": "1G"},
        volumes=[MASTER_PACKAGES + "/:/packages"],
        max_builds=1,
        build_wait_timeout=0,
        properties={"jobs": 4, "save_packages": True},
    )
)

workers = defaultdict(list)


def addWorker(
    worker_name_prefix,
    worker_id,
    worker_type,
    dockerfile,
    jobs=5,
    save_packages=False,
    shm_size="15G",
):
    base_name, name, worker_instance = createWorker(
        worker_name_prefix,
        worker_id,
        worker_type,
        dockerfile,
        jobs,
        save_packages,
        shm_size,
    )

    workers[base_name].append(name)
    c["workers"].append(worker_instance)


for w_name in ["hz-bbw"]:
    jobs = 7
    for i in [1, 4, 7]:
        addWorker(
            w_name,
            i,
            "debian-11-debug-ps-embed",
            os.environ["CONTAINER_REGISTRY_URL"] + "debian11",
            jobs=14,
            save_packages=False,
        )
        addWorker(
            w_name,
            i,
            "debian-12",
            os.environ["CONTAINER_REGISTRY_URL"] + "debian12",
            jobs=jobs,
            save_packages=True,
        )
        addWorker(
            w_name,
            i,
            "debian-12-debug-embed",
            os.environ["CONTAINER_REGISTRY_URL"] + "debian12",
            jobs=14,
            save_packages=False,
        )
        addWorker(
            w_name,
            i,
            "fedora-41",
            os.environ["CONTAINER_REGISTRY_URL"] + "fedora41",
            jobs=jobs,
            save_packages=True,
        )
        addWorker(
            w_name,
            i,
            "last-N-failed",
            os.environ["CONTAINER_REGISTRY_URL"] + "rhel9",
            jobs=jobs,
            save_packages=True,
        )
        addWorker(
            w_name,
            i,
            "ubuntu-2204-debug",
            os.environ["CONTAINER_REGISTRY_URL"] + "ubuntu22.04",
            jobs=14,
            save_packages=True,
        )
        addWorker(
            w_name,
            i,
            "ubuntu-2204-debug-ps",
            os.environ["CONTAINER_REGISTRY_URL"] + "ubuntu22.04",
            jobs=14,
            save_packages=False,
        )

for w_name in ["aarch64-bbw"]:
    jobs = 7
    for i in [6, 7]:
        addWorker(
            w_name,
            i,
            "debian-11",
            os.environ["CONTAINER_REGISTRY_URL"] + "debian11",
            jobs=jobs,
            save_packages=True,
        )

####### FACTORY CODE

## f_tarball - create source tarball
f_tarball = util.BuildFactory()
f_tarball.addStep(
    steps.ShellCommand(command=["echo", " revision: ", util.Property("revision")])
)
f_tarball.addStep(
    steps.GitHub(
        repourl=util.Property("repository"),
        mode="full",
        method="clobber",
        workdir="build/server",
        shallow=True,
        submodules=True,
    )
)
f_tarball.addStep(
    steps.Compile(
        command=["cmake", "../server"], workdir="build/mkdist", description="cmake"
    )
)
f_tarball.addStep(
    steps.Compile(
        command=["make", "dist"], workdir="build/mkdist", description="make dist"
    )
)
f_tarball.addStep(
    steps.SetPropertyFromCommand(
        property="mariadb_version",
        command="basename mariadb-*.tar.gz .tar.gz",
        workdir="build/mkdist",
    )
)
f_tarball.addStep(
    steps.SetPropertyFromCommand(
        property="master_branch",
        command=util.Interpolate(
            "echo "
            + "%(prop:mariadb_version)s"
            + " | cut -d'-' -f 2 | cut -d'.' -f 1,2"
        ),
    )
)
f_tarball.addStep(
    steps.ShellCommand(
        command=util.Interpolate("mkdir -p %(prop:buildnumber)s/logs"),
        workdir="build/mkdist",
    )
)
f_tarball.addStep(
    steps.ShellCommand(
        command=util.Interpolate(
            "sha256sum %(prop:mariadb_version)s"
            + ".tar.gz >> "
            + " %(prop:buildnumber)s"
            + "/sha256sums.txt"
            + " && mv %(prop:mariadb_version)s"
            + ".tar.gz"
            + " %(prop:buildnumber)s"
        ),
        workdir="build/mkdist",
    )
)
f_tarball.addStep(
    steps.SetPropertyFromCommand(
        command="ls -1 *.tar.gz",
        extract_fn=ls2list,
        workdir=util.Interpolate("build/mkdist/" + "%(prop:buildnumber)s"),
    )
)
f_tarball.addStep(
    steps.ShellCommand(
        name="save_packages",
        haltOnFailure=True,
        command=util.Interpolate(
            "cp -r "
            + "%(prop:builddir)s"
            + "/build/mkdist/"
            + "%(prop:buildnumber)s"
            + " /packages && sync /packages/"
            + "%(prop:buildnumber)s"
        ),
    )
)
f_tarball.addStep(
    steps.Trigger(
        schedulerNames=["s_protected_branches"],
        waitForFinish=False,
        updateSourceStamp=False,
        doStepIf=waitIfStaging,
        set_properties={
            "tarbuildnum": Property("buildnumber"),
            "mariadb_version": Property("mariadb_version"),
            "master_branch": Property("master_branch"),
        },
    )
)
f_tarball.addStep(
    steps.Trigger(
        schedulerNames=["s_upstream_all"],
        waitForFinish=False,
        updateSourceStamp=False,
        set_properties={
            "tarbuildnum": Property("buildnumber"),
            "mariadb_version": Property("mariadb_version"),
            "master_branch": Property("master_branch"),
        },
        doStepIf=lambda step: not isJepsenBranch(step),
    )
)

f_tarball.addStep(
    steps.Trigger(
        schedulerNames=["s_jepsen"],
        waitForFinish=False,
        updateSourceStamp=False,
        set_properties={
            "tarbuildnum": Property("buildnumber"),
            "mariadb_version": Property("mariadb_version"),
            "master_branch": Property("master_branch"),
        },
        doStepIf=lambda step: isJepsenBranch(step),
    )
)
f_tarball.addStep(
    steps.SetPropertyFromCommand(
        command=util.Interpolate("echo " + "prot-" + "%(prop:master_branch)s"),
        property="master_staging_branch",
    )
)
f_tarball.addStep(
    steps.ShellSequence(
        commands=[
            util.ShellArg(
                command="git config --global user.email '"
                + config["private"]["gh_mdbci"]["email"]
                + "'"
            ),
            util.ShellArg(
                command="git config --global user.name '"
                + config["private"]["gh_mdbci"]["name"]
                + "'"
            ),
            util.ShellArg(
                command="git remote set-url origin https://"
                + config["private"]["gh_mdbci"]["push_access_token"]
                + ":x-oauth-basic@github.com/cvicentiu/server"
            ),
            util.ShellArg(
                command=util.Interpolate(
                    "git fetch origin %(prop:master_staging_branch)s && git branch %(prop:master_staging_branch)s FETCH_HEAD && git checkout %(prop:master_staging_branch)s && git checkout %(prop:branch)s && git pull --unshallow"
                ),
                logfile="rebase",
            ),
            util.ShellArg(
                command=[
                    "bash",
                    "-xc",
                    util.Interpolate(
                        "if git checkout %(prop:master_staging_branch)s && git merge --ff-only %(prop:branch)s; then git push --set-upstream origin %(prop:master_staging_branch)s; else  if git checkout %(prop:branch)s && [[ $(git --no-pager log --merges %(prop:master_staging_branch)s..%(prop:branch)s | wc -l) -ne 0 ]]; then exit 1; else git rebase %(prop:master_staging_branch)s && git push --force; fi fi"
                    ),
                ],
                logfile="rebase",
            ),
        ],
        workdir="build/server",
        haltOnFailure="true",
        doStepIf=lambda step: isStagingBranch(step),
    )
)
f_tarball.addStep(
    steps.ShellCommand(
        name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True
    )
)

####### BUILDERS LIST
protected_branches_mtr_additional_args = '--suite=main,spider,spider/bg,spider/bugfix,spider/feature,spider/regression/e1121,spider/regression/e112122 --skip-test="^stack_crash$|^float$|^derived_split_innodb$|^mysql_client_test$|^kill$|^processlist_not_embedded$|^sp-big$"'

c["builders"] = []

c["builders"].append(
    util.BuilderConfig(
        name="tarball-docker",
        workernames=[
            "hz-bbw1-docker-tarball-debian-12",
            "hz-bbw4-docker-tarball-debian-12",
        ],
        tags=["tar", "bake"],
        collapseRequests=True,
        nextBuild=nextBuild,
        factory=f_tarball,
    )
)

c["builders"].append(
    util.BuilderConfig(
        name="amd64-ubuntu-2204-debug",
        workernames=workers["x64-bbw-docker-ubuntu-2204-debug"],
        tags=["Ubuntu", "quick", "gcc", "debug", "protected"],
        collapseRequests=True,
        nextBuild=nextBuild,
        canStartBuild=canStartBuild,
        locks=getLocks,
        properties={
            "build_type": "Debug",
            "additional_args": "-DWITH_DBUG_TRACE=OFF -DEXTRA_DEBUG=ON",
            "mtr_additional_args": '--skip-test="main\.show_analyze_json"',
        },
        factory=getQuickBuildFactory("debug", mtrDbPool),
    )
)

c["builders"].append(
    util.BuilderConfig(
        name="amd64-ubuntu-2204-debug-ps",
        workernames=workers["x64-bbw-docker-ubuntu-2204-debug-ps"],
        tags=["Ubuntu", "quick", "gcc", "debug", "protected"],
        collapseRequests=True,
        nextBuild=nextBuild,
        canStartBuild=canStartBuild,
        locks=getLocks,
        properties={
            "build_type": "Debug",
            "additional_args": "-DWITH_DBUG_TRACE=OFF",
            "create_package": " ",
            "mtr_additional_args": '--skip-test="main\.show_analyze_json"',
        },
        factory=getQuickBuildFactory("debug-ps", mtrDbPool),
    )
)

c["builders"].append(
    util.BuilderConfig(
        name="amd64-debian-12-debug-embedded",
        workernames=workers["x64-bbw-docker-debian-12-debug-embed"],
        tags=["Ubuntu", "quick", "gcc", "debug", "protected"],
        collapseRequests=True,
        nextBuild=nextBuild,
        canStartBuild=canStartBuild,
        locks=getLocks,
        properties={
            "build_type": "Debug",
            "create_package": " ",
            "additional_args": "-DWITH_EMBEDDED_SERVER:BOOL=ON -DWITH_DBUG_TRACE=OFF",
            "mtr_additional_args": '--skip-test="main\.show_analyze_json"',
        },
        factory=getQuickBuildFactory("debug-emb", mtrDbPool),
    )
)

c["builders"].append(
    util.BuilderConfig(
        name="amd64-debian-11-debug-ps-embedded",
        workernames=workers["x64-bbw-docker-debian-11-debug-ps-embed"],
        tags=["Ubuntu", "quick", "gcc", "debug", "protected"],
        collapseRequests=True,
        nextBuild=nextBuild,
        canStartBuild=canStartBuild,
        locks=getLocks,
        properties={
            "build_type": "Debug",
            "create_package": " ",
            "additional_args": "-DWITH_EMBEDDED_SERVER:BOOL=ON -DWITH_DBUG_TRACE=OFF",
            "mtr_additional_args": '--skip-test="main\.show_analyze_json"',
        },
        factory=getQuickBuildFactory("debug-emb-ps", mtrDbPool),
    )
)

c["builders"].append(
    util.BuilderConfig(
        name="amd64-debian-12",
        workernames=workers["x64-bbw-docker-debian-12"],
        tags=["Debian", "quick", "gcc", "protected"],
        collapseRequests=True,
        nextBuild=nextBuild,
        canStartBuild=canStartBuild,
        locks=getLocks,
        properties={"mtr_additional_args": protected_branches_mtr_additional_args},
        factory=getQuickBuildFactory("nm", mtrDbPool),
    )
)

c["builders"].append(
    util.BuilderConfig(
        name="aarch64-debian-11",
        workernames=workers["aarch64-bbw-docker-debian-11"],
        tags=["Debian", "quick", "gcc", "protected"],
        collapseRequests=True,
        nextBuild=nextBuild,
        canStartBuild=canStartBuild,
        locks=getLocks,
        properties={"mtr_additional_args": protected_branches_mtr_additional_args},
        factory=getQuickBuildFactory("nm", mtrDbPool),
    )
)

c["builders"].append(
    util.BuilderConfig(
        name="amd64-fedora-41",
        workernames=workers["x64-bbw-docker-fedora-41"],
        tags=["Fedora", "quick", "gcc", "protected"],
        collapseRequests=True,
        nextBuild=nextBuild,
        canStartBuild=canStartBuild,
        locks=getLocks,
        properties={"mtr_additional_args": protected_branches_mtr_additional_args},
        factory=getQuickBuildFactory("nm", mtrDbPool),
    )
)

c["builders"].append(
    util.BuilderConfig(
        name="amd64-last-N-failed",
        workernames=workers["x64-bbw-docker-last-N-failed"],
        tags=["Fedora", "quick", "gcc", "protected"],
        collapseRequests=True,
        nextBuild=nextBuild,
        canStartBuild=canStartBuild,
        locks=getLocks,
        properties={"mtr_additional_args": protected_branches_mtr_additional_args},
        factory=getLastNFailedBuildsFactory("debug", mtrDbPool),
    )
)
