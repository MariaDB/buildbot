# -*- python -*-
# ex: set filetype=python:

import os
from pathlib import PurePath

from configuration.builders.base import GenericBuilder
from configuration.builders.callables import canStartBuild, nextBuild
from configuration.builders.infra.runtime import DockerConfig
from configuration.builders.sequences.compile_only import (
    nopart_debug,
    no_perf_schema,
    minimal,
    without_server
)
from configuration.builders.sequences.release import deb_autobake, rpm_autobake
from configuration.builders.sequences.debug import openssl_fips
from configuration.workers import worker
from master_common import base_master_config

####### VARIABLES
cfg_dir = os.path.abspath(os.path.dirname(__file__))
base_dir = os.path.abspath(f"{cfg_dir}/../")

config = {"private": {}}
with open(os.path.join(base_dir, "master-private.cfg"), "r") as file:
    exec(file.read(), config, {})


c = BuildmasterConfig = base_master_config(config)

WORKER_POOL = worker.WorkerPool()
WORKER_POOL.add(
    arch="amd64", worker=worker.NonLatent(name="hz-bbw8", config=config, total_jobs=96)
)
WORKER_POOL.add(
    arch="amd64", worker=worker.NonLatent(name="hz-bbw9", config=config, total_jobs=96)
)


c["workers"] = WORKER_POOL.instances

# TODO (Razvan) - Suppose these vars come from another abstraction
# There are still still hardcoded values, can use maybe OS INFO yaml file.
arch = "amd64"
builder_jobs = 7
shm_size = "15g"
memlock_limit = 51200000

## ------------------------------------------------------------------- ##
##                         RELEASE BUILDERS                            ##
## ------------------------------------------------------------------- ##

c["builders"] = [
    GenericBuilder(
        name="amd64-rhel-9-rpm-autobake-migration",
        sequences=[
            rpm_autobake(
                jobs=builder_jobs,
                config=DockerConfig(
                    repository=os.environ["CONTAINER_REGISTRY_URL"],
                    image_tag="rhel9",
                    workdir=PurePath("/home/buildbot"),
                    bind_mounts=[
                        (f'{os.environ["MASTER_PACKAGES_DIR"]}/', "/packages"),
                        ("/srv/buildbot/ccache", "/mnt/ccache"),
                    ],
                    shm_size=shm_size,
                    env_vars=[
                        # TODO (Razvan) Refactoring FetchTarball will rm ARTIFACTS_URL from ENV.
                        ("ARTIFACTS_URL", os.environ["ARTIFACTS_URL"]),
                        ("CCACHE_DIR", "/mnt/ccache"),
                    ],
                    memlock_limit=memlock_limit,
                ),
                rpm_type="rhel9",
                arch=arch,
                artifacts_url=os.environ["ARTIFACTS_URL"],
                has_compat=False,
                test_galera=True,
                test_rocksdb=True,
                test_s3=True,
            ),
        ],
    ).get_config(
        workers=WORKER_POOL.get_workers_for_arch(arch=arch),
        next_build=nextBuild,
        can_start_build=canStartBuild,
        tags=[],
        jobs=builder_jobs,
        properties={
            "rpm_type": "rhel9",
            "save_packages": True,
        },
    ),
    GenericBuilder(
        name="amd64-debian-12-deb-autobake-migration",
        sequences=[
            deb_autobake(
                jobs=builder_jobs,
                config=DockerConfig(
                    repository=os.environ["CONTAINER_REGISTRY_URL"],
                    image_tag="debian12",
                    workdir=PurePath("/home/buildbot"),
                    bind_mounts=[
                        (f'{os.environ["MASTER_PACKAGES_DIR"]}/', "/packages"),
                        ("/srv/buildbot/ccache", "/mnt/ccache"),
                    ],
                    shm_size=shm_size,
                    env_vars=[
                        # TODO (Razvan) Refactoring FetchTarball will rm ARTIFACTS_URL from ENV.
                        ("ARTIFACTS_URL", os.environ["ARTIFACTS_URL"]),
                        ("CCACHE_DIR", "/mnt/ccache"),
                    ],
                    memlock_limit=memlock_limit,
                ),
                artifacts_url=os.environ["ARTIFACTS_URL"],
                test_galera=True,
                test_rocksdb=True,
                test_s3=True,
            ),
        ],
    ).get_config(
        workers=WORKER_POOL.get_workers_for_arch(arch=arch),
        next_build=nextBuild,
        can_start_build=canStartBuild,
        tags=[],
        jobs=builder_jobs,
        properties={
            "save_packages": True,
        },
    ),
]

## ------------------------------------------------------------------- ##
##                        COMPILE ONLY BUILDERS                        ##
## ------------------------------------------------------------------- ##

compile_only_builder_to_sequence = {
    "amd64-compile-only-minimal": minimal,
    "amd64-compile-only-nopart-debug": nopart_debug,
    "amd64-compile-only-noperf_schema": no_perf_schema,
    "amd64-compile-only-without-server": without_server,
}
c["builders"].extend(
    [
        GenericBuilder(
            name=builder_name,
            sequences=[
                f_seq(
                    jobs=builder_jobs,
                    config=DockerConfig(
                        repository=os.environ["CONTAINER_REGISTRY_URL"],
                        image_tag="debian13",
                        workdir=PurePath("/home/buildbot"),
                        bind_mounts=[
                            ("/srv/buildbot/ccache", "/mnt/ccache"),
                        ],
                        shm_size="15G",
                        env_vars=[
                            ("CCACHE_DIR", "/mnt/ccache"),
                        ],
                        memlock_limit=51200000,
                    ),
                )
            ],
        ).get_config(
            workers=WORKER_POOL.get_workers_for_arch(arch="amd64"),
            next_build=nextBuild,
            can_start_build=canStartBuild,
            tags=["compile-only", "protected"],
            jobs=10,
        )
        for builder_name, f_seq in compile_only_builder_to_sequence.items()
    ]
)

## ------------------------------------------------------------------- ##
##                           DEBUG BUILDERS                            ##
## ------------------------------------------------------------------- ##


c["builders"].append(
    GenericBuilder(
        name="amd64-openssl3-fips",
        sequences=[
            openssl_fips(
                jobs=12,
                config=DockerConfig(
                    repository=os.environ["CONTAINER_REGISTRY_URL"],
                    image_tag="rhel9",
                    workdir=PurePath("/home/buildbot"),
                    bind_mounts=[
                        ("/srv/buildbot/ccache", "/mnt/ccache"),
                        (f'{os.environ["MASTER_PACKAGES_DIR"]}/', "/packages"),
                    ],
                    shm_size="24g",
                    env_vars=[
                        ("CCACHE_DIR", "/mnt/ccache"),
                        ("ARTIFACTS_URL", os.environ["ARTIFACTS_URL"]),
                    ],
                    memlock_limit=memlock_limit,
                ),
            )
        ],
    ).get_config(
        workers=WORKER_POOL.get_workers_for_arch(arch="amd64"),
        next_build=nextBuild,
        can_start_build=canStartBuild,
        tags=["debug",],
        jobs=12,
    )
)