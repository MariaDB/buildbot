# -*- python -*-
# ex: set filetype=python:

import os
from pathlib import PurePath

from configuration.builders.base import GenericBuilder
from configuration.builders.callables import canStartBuild, nextBuild
from configuration.builders.infra.runtime import DockerConfig
from configuration.builders.sequences.release import deb_autobake, rpm_autobake
from configuration.workers import worker
from master_common import base_master_config

####### VARIABLES
cfg_dir = os.path.abspath(os.path.dirname(__file__))
base_dir = os.path.abspath(f"{cfg_dir}/../")

config = {"private": {}}
with open(os.path.join(base_dir, "master-private.cfg"), "r") as file:
    exec(file.read(), config, {})


c = BuildmasterConfig = base_master_config(config)

WORKER_POOL = worker.WorkerPool()
# TODO (Faustin & Razvan) - We need an actual first worker for this master
WORKER_POOL.add(
    arch="amd64", worker=worker.NonLatent(name="hz-bbw8", config=config, total_jobs=96)
)

c["workers"] = WORKER_POOL.instances

# TODO (Razvan) - Suppose these vars come from another abstraction
# There are still still hardcoded values, can use maybe OS INFO yaml file.
arch = "amd64"
builder_jobs = 7
shm_size = "15g"
memlock_limit = 51200000

c["builders"] = [
    GenericBuilder(
        name="amd64-rhel-9-rpm-autobake-migration",
        sequences=[
            rpm_autobake(
                buildername="amd64-rhel-9-rpm-autobake-migration",
                jobs=builder_jobs,
                config=DockerConfig(
                    repository=os.environ["CONTAINER_REGISTRY_URL"],
                    image_tag="rhel9",
                    workdir=PurePath("/home/buildbot"),
                    bind_mounts=[
                        (f'{os.environ["MASTER_PACKAGES_DIR"]}/', "/packages"),
                        ("/srv/buildbot/ccache", "/mnt/ccache"),
                    ],
                    shm_size=shm_size,
                    env_vars=[
                        # TODO (Razvan) Refactoring FetchTarball will rm ARTIFACTS_URL from ENV.
                        ("ARTIFACTS_URL", os.environ["ARTIFACTS_URL"]),
                        ("CCACHE_DIR", "/mnt/ccache"),
                    ],
                    memlock_limit=memlock_limit,
                ),
                rpm_type="rhel9",
                arch=arch,
                artifacts_url=os.environ["ARTIFACTS_URL"],
                has_compat=False,
                test_galera=True,
                test_rocksdb=True,
                test_s3=True,
            ),
        ],
    ).get_config(
        workers=WORKER_POOL.get_workers_for_arch(arch=arch),
        next_build=nextBuild,
        can_start_build=canStartBuild,
        tags=[],
        jobs=builder_jobs,
        properties={
            "rpm_type": "rhel9",
            "save_packages": True,
        },
    ),
    GenericBuilder(
        name="amd64-debian-12-deb-autobake-migration",
        sequences=[
            deb_autobake(
                buildername="amd64-debian-12-deb-autobake-migration",
                jobs=builder_jobs,
                config=DockerConfig(
                    repository=os.environ["CONTAINER_REGISTRY_URL"],
                    image_tag="debian12",
                    workdir=PurePath("/home/buildbot"),
                    bind_mounts=[
                        (f'{os.environ["MASTER_PACKAGES_DIR"]}/', "/packages"),
                        ("/srv/buildbot/ccache", "/mnt/ccache"),
                    ],
                    shm_size=shm_size,
                    env_vars=[
                        # TODO (Razvan) Refactoring FetchTarball will rm ARTIFACTS_URL from ENV.
                        ("ARTIFACTS_URL", os.environ["ARTIFACTS_URL"]),
                        ("CCACHE_DIR", "/mnt/ccache"),
                    ],
                    memlock_limit=memlock_limit,
                ),
                artifacts_url=os.environ["ARTIFACTS_URL"],
                test_galera=True,
                test_rocksdb=True,
                test_s3=True,
            ),
        ],
    ).get_config(
        workers=WORKER_POOL.get_workers_for_arch(arch=arch),
        next_build=nextBuild,
        can_start_build=canStartBuild,
        tags=[],
        jobs = builder_jobs,
        properties={
            "save_packages": True,
        },
    ),
]
