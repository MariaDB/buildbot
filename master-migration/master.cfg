# -*- python -*-
# ex: set filetype=python:

import os
from datetime import timedelta

from buildbot.plugins import steps, util, worker
from buildbot.process.properties import Property
from buildbot.process.results import FAILURE, SUCCESS, WARNINGS
from common_factories import addWinTests, getQuickBuildFactory
from constants import MTR_ENV, SAVED_PACKAGE_BRANCHES
from master_common import base_master_config
from utils import (
    canStartBuild,
    createVar,
    getHTMLLogString,
    getSourceTarball,
    hasFailed,
    ls2list,
    moveMTRLogs,
    mtrJobsMultiplier,
    nextBuild,
    prioritizeBuilders,
    savePackageIfBranchMatch,
)

from builders.

####### VARIABLES
vsWarningPattern = "^.*: warning C.*$"

cfg_dir = os.path.abspath(os.path.dirname(__file__))

# Non autogen master. For now the directory structure is:
# <srcdir>
# └── <master-name>
#     ├── buildbot.tac
#     └── master.cfg
#
# Non autogen masters load from <srcdir> for now.
base_dir = os.path.abspath(f"{cfg_dir}/../")

# Load the slave, database passwords and 3rd-party tokens from an external private file, so
# that the rest of the configuration can be public.
config = {"private": {}}
with open(os.path.join(base_dir, "master-private.cfg"), "r") as file:
    exec(file.read(), config, {})

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = base_master_config(config)

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c["workers"] = []

# TODO(cvicentiu)
workers = []

c["builders"] = [
    AlmaLinuxBuilder(version=8, arch='aarch64').get_config(workers=workers, can_start_build=canStartBuild, next_build=nextBuild, tags=[])
    AlmaLinuxBuilder(version=9, arch='amd64').get_config(workers=workers, can_start_build=canStartBuild, next_build=nextBuild, tags=[])
    DebianBuilder(version=11).get_config(workers=workers, can_start_build=canStartBuild, next_build=nextBuild, tags=[])
    DebianBuilder(version=12).get_config(workers=workers, can_start_build=canStartBuild, next_build=nextBuild, tags=[])
    DebianBuilder(version=13).get_config(workers=workers, can_start_build=canStartBuild, next_build=nextBuild, tags=[])
    UbuntuBuilder(version='20.04').get_config(workers=workers, can_start_build=canStartBuild, next_build=nextBuild, tags=[])
    UbuntuBuilder(version='20.10').get_config(workers=workers, can_start_build=canStartBuild, next_build=nextBuild, tags=[])
    UbuntuBuilder(version='21.04').get_config(workers=workers, can_start_build=canStartBuild, next_build=nextBuild, tags=[])
]

# Add a Janitor configurator that removes old logs
c["configurators"] = [util.JanitorConfigurator(logHorizon=timedelta(weeks=6), hour=23)]
