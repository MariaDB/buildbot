# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import steps, util, worker
from buildbot.steps.shell import Test
from constants import BUILDERS_INSTALL, OS_INFO
from master_common import base_master_config
from utils import canStartBuild, envFromProperties, getScript, nextBuild, printEnv

cfg_dir = os.path.abspath(os.path.dirname(__file__))

# Non autogen master. For now the directory structure is:
# <srcdir>
# └── <master-name>
#     ├── buildbot.tac
#     └── master.cfg
#
# Non autogen masters load from <srcdir> for now.
base_dir = os.path.abspath(f"{cfg_dir}/../")

# Load the slave, database passwords and 3rd-party tokens from an external private file, so
# that the rest of the configuration can be public.
config = {"private": {}}
with open(os.path.join(base_dir, "master-private.cfg"), "r") as file:
    exec(file.read(), config, {})

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = base_master_config(config)

artifactsURL = os.environ["ARTIFACTS_URL"]


####### UTILS
def getRpmUpgradeStep():
    return Test(
        name="upgrade",
        haltOnFailure=True,
        description=["testing", "upgrade"],
        descriptionDone=["test", "upgrade"],
        env=envFromProperties(
            [
                "BB_CI",
                "arch",
                "artifactsURL",
                "branch",
                "dist_name",
                "is_main_tree",
                "major_version",
                "mariadb_version",
                "master_branch",
                "needsGalera",
                "parentbuildername",
                "systemdCapability",
                "test_mode",
                "test_type",
            ]
        ),
        command=["./rpm-upgrade.sh"],
    )


def getRpmInstallStep():
    return Test(
        name="install",
        haltOnFailure=True,
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        env=envFromProperties(
            [
                "BB_CI",
                "arch",
                "artifactsURL",
                "branch",
                "dist_name",
                "major_version",
                "mariadb_version",
                "master_branch",
                "needsGalera",
                "parentbuildername",
                "systemdCapability",
                "test_mode",
                "test_type",
            ]
        ),
        command=["./rpm-install.sh"],
    )


def getDebUpgradeStep():
    return Test(
        name="upgrade",
        haltOnFailure=True,
        description=["testing", "upgrade"],
        descriptionDone=["test", "upgrade"],
        env=envFromProperties(
            [
                "BB_CI",
                "arch",
                "artifactsURL",
                "branch",
                "dist_name",
                "major_version",
                "mariadb_version",
                "master_branch",
                "needsGalera",
                "parentbuildername",
                "systemdCapability",
                "test_mode",
                "test_type",
            ]
        ),
        command=["./deb-upgrade.sh"],
    )


def getDebInstallStep():
    return Test(
        name="install",
        haltOnFailure=True,
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        env=envFromProperties(
            [
                "BB_CI",
                "arch",
                "artifactsURL",
                "branch",
                "dist_name",
                "major_version",
                "mariadb_version",
                "master_branch",
                "needsGalera",
                "parentbuildername",
                "systemdCapability",
                "test_mode",
                "test_type",
            ]
        ),
        command=["./deb-install.sh"],
    )


def getMajorVersionStep():
    return steps.SetPropertyFromCommand(
        name="major_version",
        property="major_version",
        command=util.Interpolate(
            'sh -c "echo %(prop:mariadb_version)s | sed -e "s/^mariadb-//" | sed "s/.[^.]*$//""'
        ),
    )


def getPAMTestStep():
    return Test(
        name="PAM authentication test",
        haltOnFailure=True,
        description=["testing", "PAM"],
        descriptionDone=["test", "PAM"],
        env=envFromProperties(
            [
                "systemdCapability",
            ]
        ),
        command=["./pam-test.sh"],
    )


# FACTORY
f_deb_install = util.BuildFactory()
f_deb_install.addStep(printEnv())
f_deb_install.addStep(getScript("deb-install.sh"))
f_deb_install.addStep(getDebInstallStep())
f_deb_install.addStep(getScript("pam-test.sh"))
f_deb_install.addStep(getPAMTestStep())

f_deb_upgrade = util.BuildFactory()
f_deb_upgrade.addStep(printEnv())
f_deb_upgrade.addStep(getMajorVersionStep())
f_deb_upgrade.addStep(getScript("deb-upgrade.sh"))
f_deb_upgrade.addStep(getDebUpgradeStep())

f_rpm_install = util.BuildFactory()
f_rpm_install.addStep(printEnv())
f_rpm_install.addStep(getScript("rpm-install.sh"))
f_rpm_install.addStep(getRpmInstallStep())
f_rpm_install.addStep(getScript("pam-test.sh"))
f_rpm_install.addStep(getPAMTestStep())

f_rpm_upgrade = util.BuildFactory()
f_rpm_upgrade.addStep(printEnv())
f_rpm_upgrade.addStep(getMajorVersionStep())
f_rpm_upgrade.addStep(getScript("rpm-upgrade.sh"))
f_rpm_upgrade.addStep(getRpmUpgradeStep())


####### WORKERS and BUILDERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c["workers"] = []
c["builders"] = []

# Add the workers and builds based on the configured install builders (see constants.py)
for builder_name in BUILDERS_INSTALL:
    # Parse builder name
    platform, os_name, os_version, builder_type = builder_name.split("-")[:4]

    assert builder_type in ["rpm", "deb"]

    os_info_name = os_name + "-" + os_version

    libvirt_worker_name = (
        config["private"]["libvirt_workers"][platform][0]
        + "-"
        + os_name
        + "-"
        + os_version
        + "-"
        + platform
    )
    connection_url = config["private"]["libvirt_workers"][platform][1]
    image_path = "/var/libvirt/images/" + libvirt_worker_name

    c["workers"].append(
        worker.LibVirtWorker(
            libvirt_worker_name,
            config["private"]["worker_pass"]["libvirt"],
            util.Connection(connection_url),
            image_path,
            build_wait_timeout=0,
            max_builds=1,
        )
    )

    if builder_type == "deb":
        factory_install = f_deb_install
        factory_upgrade = f_deb_upgrade
    elif builder_type == "rpm":
        factory_install = f_rpm_install
        factory_upgrade = f_rpm_upgrade
        if platform == "amd64":
            platform = "x86_64"

    c["builders"].append(
        util.BuilderConfig(
            name=builder_name,
            workernames=libvirt_worker_name,
            tags=[os_name, builder_type, "install", "kvm"],
            collapseRequests=True,
            nextBuild=nextBuild,
            canStartBuild=canStartBuild,
            properties={
                "systemdCapability": "yes",
                "needsGalera": "yes",
                "dist_name": os_name,
                "arch": platform,
                "BB_CI": True,
                "artifactsURL": artifactsURL,
            },
            factory=factory_install,
        )
    )

    # Add major upgrade builder
    major_upgrade_name = "-".join(builder_name.split("-")[:5]) + "-major-upgrade"

    c["builders"].append(
        util.BuilderConfig(
            name=major_upgrade_name,
            workernames=libvirt_worker_name,
            tags=[os_name, builder_type, "upgrade", "kvm", "major", "server"],
            collapseRequests=True,
            nextBuild=nextBuild,
            canStartBuild=canStartBuild,
            properties={
                "systemdCapability": "yes",
                "needsGalera": "yes",
                "dist_name": os_name,
                "arch": platform,
                "test_mode": "server",
                "test_type": "major",
                "BB_CI": True,
                "artifactsURL": artifactsURL,
            },
            factory=factory_upgrade,
        )
    )

    # Add minor upgrade builder, test_mode=all
    minor_upgrade_name = "-".join(builder_name.split("-")[:5]) + "-minor-upgrade"

    c["builders"].append(
        util.BuilderConfig(
            name=minor_upgrade_name + "-all",
            workernames=libvirt_worker_name,
            tags=[os_name, builder_type, "upgrade", "kvm", "minor", "all"],
            collapseRequests=True,
            nextBuild=nextBuild,
            canStartBuild=canStartBuild,
            properties={
                "systemdCapability": "yes",
                "needsGalera": "yes",
                "dist_name": os_name,
                "arch": platform,
                "test_mode": "all",
                "test_type": "minor",
                "BB_CI": True,
                "artifactsURL": artifactsURL,
            },
            factory=factory_upgrade,
        )
    )

    # Add minor upgrade builder, test_mode=columnstore
    c["builders"].append(
        util.BuilderConfig(
            name=minor_upgrade_name + "-columnstore",
            workernames=libvirt_worker_name,
            tags=[os_name, builder_type, "upgrade", "kvm", "minor", "columnstore"],
            collapseRequests=True,
            nextBuild=nextBuild,
            canStartBuild=canStartBuild,
            properties={
                "systemdCapability": "yes",
                "needsGalera": "no",
                "dist_name": os_name,
                "arch": platform,
                "test_mode": "columnstore",
                "test_type": "minor",
                "BB_CI": True,
                "artifactsURL": artifactsURL,
            },
            factory=factory_upgrade,
        )
    )
