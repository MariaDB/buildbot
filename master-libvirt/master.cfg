# -*- python -*-
# ex: set filetype=python:

import os
from dataclasses import dataclass

from buildbot.plugins import steps, util, worker
from buildbot.steps.shell import Test
from constants import BUILDERS_INSTALL, OS_INFO
from master_common import base_master_config
from utils import canStartBuild, envFromProperties, getScript, nextBuild, printEnv


cfg_dir = os.path.abspath(os.path.dirname(__file__))

# Non autogen master. For now the directory structure is:
# <srcdir>
# └── <master-name>
#     ├── buildbot.tac
#     └── master.cfg
#
# Non autogen masters load from <srcdir> for now.
base_dir = os.path.abspath(f"{cfg_dir}/../")

# Load the slave, database passwords and 3rd-party tokens from an external private file, so
# that the rest of the configuration can be public.
config = {"private": {}}
with open(os.path.join(base_dir, "master-private.cfg"), "r") as file:
    exec(file.read(), config, {})

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = base_master_config(config)

artifactsURL = os.environ["ARTIFACTS_URL"]


INSTALL_UPGRADE_PROPERTIES_LIST = [
    # Must be set to True in BB for upgrade scripts to work
    "BB_CI",
    # TODO(cvicentiu) compared to arm64 instead of aarch64 in scripts/deb-install.sh
    # amd64, aarch64, ppc64le, s390x, x86
    "arch",
    # Where artifacts are downloaded from ci.mariadb.org
    "artifactsURL",
    # Impacts upgrade and install logic. Same value as the branch in git
    # (incl. bb- prefix and other suffixes).
    "branch",
    # almalinux, centos, debian, fedora, openeuler, rhel, ubuntu, rockylinux
    "dist_name",
    # compared to "yes" in rpm-upgrade.sh, but never set.
    # TODO(cvicentiu) investigate and fix this.
    "is_main_tree",
    # TODO(cvicentiu) This should be handled within the script, not BB,
    # mariadb_version should be enough.
    # Extracted from mariadb_version variable as a separate BB step.
    "major_version",
    # Eg. mariadb-10.11.12, comes from parent (tarball) builder props,
    # based on tarball filename.
    "mariadb_version",
    # Set from parent (tarball) builder. First two numbers from mariadb_version.
    "master_branch",
    # TODO(cvicentiu) investigate and remove this one.
    # Set to "yes" / "no" within this file, but never used anywhere.
    "needsGalera",
    # Set to the builder that triggered this install/upgrade
    # Used during install scripts to create builder URL.
    "parentbuildername",
    # TODO(cvicentiu) This should be removed from install / upgrade scripts.
    # and finally removed from here.
    # Always set to "yes" within this file.
    "systemdCapability",
    # Set by tarball docker.
    "tarbuildnum",
    # "server", "all", "columnstore", "deps"
    # Impacts which tests are run. Set within this file only.
    "test_mode",
    # "major", "minor"
    # Impacts which tests are run. set within this file.
    "test_type",
    # Loaded from os_info.yaml. Impacts upgrade & install tests.
    "version_name",
]


def _get_test_step(name: str, script: str):
    return Test(
        name=name,
        haltOnFailure=True,
        description=["testing", name],
        descriptionDone=["test", name],
        env=envFromProperties(INSTALL_UPGRADE_PROPERTIES_LIST),
        command=[script],

    )


####### UTILS
def getRpmUpgradeStep():
    return _get_test_step(name="upgrade", script="./rpm-upgrade.sh")


def getRpmInstallStep():
    return _get_test_step(name="install", script="./rpm-install.sh")


def getDebUpgradeStep():
    return _get_test_step(name="upgrade", script="./deb-upgrade.sh")


def getDebInstallStep():
    return _get_test_step(name="install", script="./deb-install.sh")


def getMajorVersionStep():
    return steps.SetPropertyFromCommand(
        name="major_version",
        property="major_version",
        command=util.Interpolate(
            'sh -c "echo %(prop:mariadb_version)s | sed -e "s/^mariadb-//" | sed "s/.[^.]*$//""'
        ),
    )


def getPAMTestStep():
    return Test(
        name="PAM authentication test",
        haltOnFailure=True,
        description=["testing", "PAM"],
        descriptionDone=["test", "PAM"],
        env=envFromProperties(
            [
                "systemdCapability",
            ]
        ),
        command=["./pam-test.sh"],
    )


# FACTORY
f_deb_install = util.BuildFactory()
f_deb_install.addStep(printEnv())
f_deb_install.addStep(getScript("deb-install.sh"))
f_deb_install.addStep(getDebInstallStep())
f_deb_install.addStep(getScript("pam-test.sh"))
f_deb_install.addStep(getPAMTestStep())

f_deb_upgrade = util.BuildFactory()
f_deb_upgrade.addStep(printEnv())
f_deb_upgrade.addStep(getMajorVersionStep())
f_deb_upgrade.addStep(getScript("deb-upgrade.sh"))
f_deb_upgrade.addStep(getDebUpgradeStep())

f_rpm_install = util.BuildFactory()
f_rpm_install.addStep(printEnv())
f_rpm_install.addStep(getScript("rpm-install.sh"))
f_rpm_install.addStep(getRpmInstallStep())
f_rpm_install.addStep(getScript("pam-test.sh"))
f_rpm_install.addStep(getPAMTestStep())

f_rpm_upgrade = util.BuildFactory()
f_rpm_upgrade.addStep(printEnv())
f_rpm_upgrade.addStep(getMajorVersionStep())
f_rpm_upgrade.addStep(getScript("rpm-upgrade.sh"))
f_rpm_upgrade.addStep(getRpmUpgradeStep())


####### WORKERS and BUILDERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c["workers"] = []
c["builders"] = []


@dataclass
class LibVirtWorkerSpecs:
    platform: str
    os_name: str
    os_version: str

    def __post_init__(self):
        self.host, self.url = config["private"]["libvirt_workers"][platform]

    @property
    def name(self) -> str:
        return f"{self.host}-{self.os_name}-{self.os_version}-{self.platform}"

    @property
    def connection_url(self) -> str:
        return self.url

    @property
    def image_path(self) -> str:
        return f"/var/libvirt/images/{self.name}",

    @property
    def password(self) -> str:
        return config["private"]["worker_pass"]["libvirt"]


# Add the workers and builds based on the configured install builders (see constants.py)
for builder_name in BUILDERS_INSTALL:
    # Parse builder name
    platform, os_name, os_version, builder_type = builder_name.split("-")[:4]

    assert builder_type in ["rpm", "deb"]

    os_info_name = os_name + "-" + os_version

    worker_specs = LibVirtWorkerSpecs(platform=platform,
                                      os_name=os_name,
                                      os_version=os_version)

    c["workers"].append(
        worker.LibVirtWorker(
            worker_specs.name,
            worker_specs.password,
            util.Connection(worker_specs.connection_url),
            worker_specs.image_path,
            build_wait_timeout=0,
            max_builds=1,
        )
    )

    factory_install = f_deb_install if builder_type == "deb" else f_rpm_install
    factory_upgrade = f_deb_upgrade if builder_type == "deb" else f_rpm_upgrade

    c["builders"].append(
        util.BuilderConfig(
            name=builder_name,
            workernames=worker_specs.name,
            tags=[os_name, builder_type, "install", "kvm"],
            collapseRequests=True,
            nextBuild=nextBuild,
            canStartBuild=canStartBuild,
            properties={
                "systemdCapability": "yes",
                "needsGalera": "yes",
                "dist_name": os_name,
                "version_name": OS_INFO[os_info_name]["version_name"],
                "arch": platform,
                "BB_CI": True,
                "artifactsURL": artifactsURL,
            },
            factory=factory_install,
        )
    )

    # Add major upgrade builder
    major_upgrade_name = "-".join(builder_name.split("-")[:5]) + "-major-upgrade"

    c["builders"].append(
        util.BuilderConfig(
            name=major_upgrade_name,
            workernames=worker_specs.name,
            tags=[os_name, builder_type, "upgrade", "kvm", "major", "server"],
            collapseRequests=True,
            nextBuild=nextBuild,
            canStartBuild=canStartBuild,
            properties={
                "systemdCapability": "yes",
                "needsGalera": "yes",
                "dist_name": os_name,
                "version_name": OS_INFO[os_info_name]["version_name"],
                "arch": platform,
                "test_mode": "server",
                "test_type": "major",
                "BB_CI": True,
                "artifactsURL": artifactsURL,
            },
            factory=factory_upgrade,
        )
    )

    # Add minor upgrade builder, test_mode=all
    minor_upgrade_name = "-".join(builder_name.split("-")[:5]) + "-minor-upgrade"

    c["builders"].append(
        util.BuilderConfig(
            name=minor_upgrade_name + "-all",
            workernames=worker_specs.name,
            tags=[os_name, builder_type, "upgrade", "kvm", "minor", "all"],
            collapseRequests=True,
            nextBuild=nextBuild,
            canStartBuild=canStartBuild,
            properties={
                "systemdCapability": "yes",
                "needsGalera": "yes",
                "dist_name": os_name,
                "version_name": OS_INFO[os_info_name]["version_name"],
                "arch": platform,
                "test_mode": "all",
                "test_type": "minor",
                "BB_CI": True,
                "artifactsURL": artifactsURL,
            },
            factory=factory_upgrade,
        )
    )

    # Add minor upgrade builder, test_mode=columnstore
    c["builders"].append(
        util.BuilderConfig(
            name=minor_upgrade_name + "-columnstore",
            workernames=worker_specs.name,
            tags=[os_name, builder_type, "upgrade", "kvm", "minor", "columnstore"],
            collapseRequests=True,
            nextBuild=nextBuild,
            canStartBuild=canStartBuild,
            properties={
                "systemdCapability": "yes",
                "needsGalera": "no",
                "dist_name": os_name,
                "version_name": OS_INFO[os_info_name]["version_name"],
                "arch": platform,
                "test_mode": "columnstore",
                "test_type": "minor",
                "BB_CI": True,
                "artifactsURL": artifactsURL,
            },
            factory=factory_upgrade,
        )
    )
