# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from buildbot.process.properties import Property, Properties
from buildbot.steps.shell import ShellCommand, Compile, Test, SetPropertyFromCommand
from buildbot.steps.mtrlogobserver import MTR, MtrLogObserver
from buildbot.steps.source.github import GitHub
from buildbot.process.remotecommand import RemoteCommand
from datetime import timedelta
from twisted.internet import defer

import docker
import os
import sys

sys.setrecursionlimit(10000)

sys.path.insert(0, "/srv/buildbot/master")
from common_factories import *
from locks import *
from schedulers_definition import SCHEDULERS
from utils import *

####### VARIABLES
vsWarningPattern = "^.*: warning C.*$"

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Load the slave, database passwords and 3rd-party tokens from an external private file, so
# that the rest of the configuration can be public.
config = {"private": {}}
exec(open("../master-private.cfg").read(), config, {})

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').
c["title"] = os.environ["TITLE"]
c["titleURL"] = os.environ["TITLE_URL"]

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.
c["buildbotURL"] = os.environ["BUILDMASTER_URL"]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
port = int(os.environ["PORT"])
c["protocols"] = {"pb": {"port": port}}

####### DB URL

c["db"] = {
    # This specifies what database buildbot uses to store its state.
    "db_url": config["private"]["db_url"]
}

mtrDbPool = util.EqConnectionPool(
    "MySQLdb",
    config["private"]["db_host"],
    config["private"]["db_user"],
    config["private"]["db_password"],
    config["private"]["db_mtr_db"],
)

####### Disable net usage reports from being sent to buildbot.net
c["buildbotNetUsageData"] = None

####### Services
c["services"] = []
context = util.Interpolate("buildbot/%(prop:buildername)s")
gs = reporters.GitHubStatusPush(
    token=config["private"]["gh_mdbci"]["access_token"],
    context=context,
    startDescription="Build started.",
    endDescription="Build done.",
    verbose=True,
    builders=GITHUB_STATUS_BUILDERS,
)
c["services"].append(gs)
c["secretsProviders"] = [
    secrets.SecretInAFile(
        dirname=os.environ["MASTER_CREDENTIALS_DIR"]
    )
]
####### Builder priority
c["prioritizeBuilders"] = prioritizeBuilders

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.
c["schedulers"] = SCHEDULERS

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c["workers"] = []

# Normal workers


def mkWorker(name, **kwargs):
    return worker.Worker(name, config["private"]["worker_pass"][name], **kwargs)


# AIX worker
aix_worker = mkWorker("aix-worker", properties={"jobs": 12})
c["workers"].append(aix_worker)

# Docker Library
dockerlibrary_worker = mkWorker(
    os.environ["MASTER_NONLATENT_DOCKERLIBRARY_WORKER"],
    properties={
        "jobs": 1,
        "push_containers": os.environ["ENVIRON"] != "DEV",
        "scriptpath": "dev" if os.environ["ENVIRON"] == "DEV" else "main",
    },
)
c["workers"].append(dockerlibrary_worker)

## windows-bbw1
windows_worker = mkWorker(
    "bbw1-windows", max_builds=1, properties={"jobs": 64, "save_packages": True}
)
c["workers"].append(windows_worker)

## windows-bbw2
windows_worker = mkWorker(
    "bbw2-windows", max_builds=1, properties={"jobs": 64, "save_packages": True}
)
c["workers"].append(windows_worker)

## bbw1-mac
mac_worker = mkWorker(
    "bbw1-mac", max_builds=2, properties={"jobs": 16, "save_packages": False}
)
c["workers"].append(mac_worker)
mac_worker = mkWorker(
    "bbw2-mac", max_builds=2, properties={"jobs": 16, "save_packages": False}
)
c["workers"].append(mac_worker)

## hz-freebsd-bbw1
freebds_worker = mkWorker(
    "hz-freebsd-bbw1", max_builds=1, properties={"jobs": 10, "save_packages": False}
)
c["workers"].append(freebds_worker)

####### FACTORY CODE

f_windows_env = {
    "TMP": util.Interpolate("C:\\Buildbot\\%(prop:buildername)s\\build\\tmpdir"),
    "TEMP": util.Interpolate("C:\\Buildbot\\%(prop:buildername)s\\build\\tmpdir"),
}
f_windows_env.update(MTR_ENV)

# f_quick_build = getQuickBuildFactory(mtrDbPool)
f_rpm_autobake = getRpmAutobakeFactory(mtrDbPool)

## f_windows
f_windows = util.BuildFactory()
f_windows.addStep(
    steps.ShellCommand(
        name="stop_processes",
        command="taskkill /im mariadb-test.exe /im mariadbd.exe /f || ver>nul",
        alwaysRun=True,
    )
)
f_windows.addStep(
    steps.ShellCommand(
        name="unlock_file_handles",
        command=["dojob", "unlock_handles.bat"],
        alwaysRun=True,
    )
)
f_windows.addStep(
    steps.ShellCommand(
        name="removedirs",
        command=[
            "dojob",
            '"',
            "powershell",
            "-command",
            "Remove-Item",
            '"$pwd\*"',
            "-Recurse",
            "-Force",
            '"',
        ],
        alwaysRun=True,
    )
)
f_windows.addStep(steps.ShellCommand(name="create tmp dir", command="mkdir tmpdir"))
f_windows.addStep(
    steps.ShellCommand(
        name="fetch_tarball",
        description="fetching source tarball",
        descriptionDone="fetching source tarball...done",
        haltOnFailure=True,
        command=[
            "dojob",
            '"',
            "powershell",
            "-command",
            "curl",
            util.Interpolate(
                os.environ["ARTIFACTS_URL"]
                + "/%(prop:tarbuildnum)s/%(prop:mariadb_version)s.tar.gz"
            ),
            "-o",
            util.Interpolate("%(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz"),
            '"',
        ],
    )
)
f_windows.addStep(
    steps.ShellCommand(
        name="unpack tarball",
        env=f_windows_env,
        command=[
            "dojob",
            '"',
            util.Interpolate(
                "tar -xzf %(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz --strip-components=1"
            ),
            '"',
        ],
    )
)
f_windows.addStep(
    steps.Compile(
        name="cmake",
        env=f_windows_env,
        command=[
            "dojob",
            '"',
            util.Interpolate(
                '"C:\Program Files (x86)\Microsoft Visual Studio\\2022\BuildTools\Common7\Tools\VsDevCmd.bat" -arch=%(kw:arch)s && cmake . -A %(kw:arch_cmake)s -DPLUGIN_ROCKSDB=NO -DMYSQL_MAINTAINER_MODE=ERR -Wno-dev',
                arch=util.Property("arch", default="x64"),
                arch_cmake=util.Property("arch_cmake", default="x64"),
            ),
            '"',
        ],
        warningPattern=vsWarningPattern,
    )
)
f_windows.addStep(
    steps.Compile(
        name="compile",
        env=f_windows_env,
        command=[
            "dojob",
            '"',
            util.Interpolate(
                '"C:\Program Files (x86)\Microsoft Visual Studio\\2022\BuildTools\Common7\Tools\VsDevCmd.bat" -arch=%(kw:arch)s && cmake --build . --verbose --config Debug -- -m',
                arch=util.Property("arch", default="x64"),
            ),
            '"',
        ],
        timeout=600,
        warningPattern=vsWarningPattern,
    )
)

windows_tests = {
    "nm": {"create_scripts": True},
    "connect": {
        "suites": ["connect"],
    },
}

for typ in windows_tests:
    addWinTests(
        f_windows,
        mtr_test_type=typ,
        mtr_env=f_windows_env,
        mtr_additional_args=util.Property("mtr_additional_args", default=""),
        mtr_step_db_pool=mtrDbPool,
        mtr_suites=windows_tests[typ].get("suites", ["default"]),
        create_scripts=windows_tests[typ].get("create_scripts", False),
    )


f_windows.addStep(
    steps.DirectoryUpload(
        name="save mariadb log files",
        alwaysRun=True,
        workersrc="buildbot\\logs\\",
        masterdest=util.Interpolate(
            "/srv/buildbot/packages/"
            + "%(prop:tarbuildnum)s"
            + "/logs/"
            + "%(prop:buildername)s"
        ),
        url=util.Interpolate(
            f'{os.environ["ARTIFACTS_URL"]}'
            "/"
            "%(prop:tarbuildnum)s"
            "/"
            "logs"
            "/"
            "%(prop:buildername)s"
            "/"
        ),
    )
)
f_windows.addStep(
    steps.ShellCommand(
        name="cleanup",
        command=[
            "dojob",
            '"',
            "powershell",
            "-command",
            "Remove-Item",
            '"$pwd\*"',
            "-Recurse",
            "-Force",
            '"',
        ],
        alwaysRun=True,
    )
)

## f_windows_msi

f_windows_msi_env = {
    "TMP": util.Interpolate(
        "{0}\\%(prop:buildername)s\\build\\tmpdir".format(
            "D:\\DEV\\Buildbot" if os.environ["ENVIRON"] == "DEV" else "D:\\Buildbot"
        )
    ),
    "TEMP": util.Interpolate(
        "{0}\\%(prop:buildername)s\\build\\tmpdir".format(
            "D:\\DEV\\Buildbot" if os.environ["ENVIRON"] == "DEV" else "D:\\Buildbot"
        )
    ),
}
f_windows_msi_env.update(MTR_ENV)

f_windows_msi = util.BuildFactory()
f_windows_msi.addStep(
    steps.ShellCommand(
        name="stop_processes",
        command="taskkill /im mariadb-test.exe /im mariadbd.exe /f || ver>nul",
        alwaysRun=True,
    )
)
f_windows_msi.addStep(
    steps.ShellCommand(
        name="unlock_file_handles",
        command=["dojob", "unlock_handles.bat"],
        alwaysRun=True,
        workdir=util.Interpolate("C:\\Buildbot\\%(prop:buildername)s"),
    )
)
f_windows_msi.addStep(
    steps.ShellCommand(
        name="removedirs",
        command=[
            "dojob",
            '"',
            "powershell",
            "-command",
            "Remove-Item",
            '"$pwd\*"',
            "-Recurse",
            "-Force",
            '"',
        ],
        alwaysRun=True,
    )
)
f_windows_msi.addStep(steps.ShellCommand(name="create tmp dir", command="mkdir tmpdir"))
f_windows_msi.addStep(
    steps.ShellCommand(
        name="fetch_tarball",
        description="fetching source tarball",
        descriptionDone="fetching source tarball...done",
        haltOnFailure=True,
        command=[
            "dojob",
            '"',
            "powershell",
            "-command",
            "curl",
            util.Interpolate(
                os.environ["ARTIFACTS_URL"]
                + "/%(prop:tarbuildnum)s/%(prop:mariadb_version)s.tar.gz"
            ),
            "-o",
            util.Interpolate("%(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz"),
            '"',
        ],
    )
)
f_windows_msi.addStep(
    steps.ShellCommand(
        name="unpack tarball",
        command=[
            "dojob",
            '"',
            util.Interpolate(
                "tar -xzf %(prop:tarbuildnum)s_%(prop:mariadb_version)s.tar.gz --strip-components=1"
            ),
            '"',
        ],
    )
)
f_windows_msi.addStep(
    steps.Compile(
        name="cmake",
        env=f_windows_msi_env,
        command=[
            "dojob",
            '"',
            util.Interpolate(
                '"C:\Program Files (x86)\Microsoft Visual Studio\\2022\BuildTools\Common7\Tools\VsDevCmd.bat" -arch=%(kw:arch)s && cmake . -G "Visual Studio 17 2022" -A %(kw:arch_cmake)s  -DBUILD_CONFIG=mysql_release -DWITH_THIRD_PARTY=HeidiSQL -DWITH_EMBEDDED_SERVER=0 -DSIGNCODE=ON -DSIGNTOOL_PARAMETERS="/fd;SHA256;/a;/t;http://timestamp.globalsign.com/?signature=sha2" -DWITH_UNIT_TESTS=0 -DMYSQL_MAINTAINER_MODE=ERR',
                arch=util.Property("arch", default="x64"),
                arch_cmake=util.Property("arch_cmake", default="x64"),
            ),
            '"',
        ],
        warningPattern=vsWarningPattern,
    )
)
f_windows_msi.addStep(
    steps.Compile(
        name="compile",
        env=f_windows_msi_env,
        command=[
            "dojob",
            '"',
            util.Interpolate(
                '"C:\Program Files (x86)\Microsoft Visual Studio\\2022\BuildTools\Common7\Tools\VsDevCmd.bat" -arch=%(kw:arch)s && cmake --build  .  --verbose --config RelWithDebInfo -- -m',
                arch=util.Property("arch", default="x64"),
            ),
            '"',
        ],
        timeout=600,
        warningPattern=vsWarningPattern,
    )
)
f_windows_msi.addStep(
    steps.Compile(
        name="package",
        env=f_windows_msi_env,
        command=[
            "dojob",
            '"',
            util.Interpolate(
                '"C:\Program Files (x86)\Microsoft Visual Studio\\2022\BuildTools\Common7\Tools\VsDevCmd.bat" -arch=%(kw:arch)s && cmake --build  .  --config RelWithDebInfo --target win_package && cmake --build  .  --config RelWithDebInfo --target MSI',
                arch=util.Property("arch", default="x64"),
            ),
            '"',
        ],
        timeout=600,
        warningPattern=vsWarningPattern,
    )
)
windows_msi_tests = {
    "nm": {"create_scripts": True},
    "connect": {
        "suites": ["connect"],
    },
}

for typ in windows_msi_tests:
    addWinTests(
        f_windows_msi,
        mtr_test_type=typ,
        mtr_env=f_windows_msi_env,
        mtr_additional_args=util.Property("mtr_additional_args", default=""),
        mtr_step_db_pool=mtrDbPool,
        mtr_suites=windows_msi_tests[typ].get("suites", ["default"]),
        create_scripts=windows_msi_tests[typ].get("create_scripts", False),
    )

f_windows_msi.addStep(
    steps.DirectoryUpload(
        name="save mariadb log files",
        alwaysRun=True,
        workersrc="buildbot\\logs\\",
        masterdest=util.Interpolate(
            "/srv/buildbot/packages/"
            + "%(prop:tarbuildnum)s"
            + "/logs/"
            + "%(prop:buildername)s"
        ),
        url=util.Interpolate(
            f'{os.environ["ARTIFACTS_URL"]}'
            "/"
            "%(prop:tarbuildnum)s"
            "/"
            "logs"
            "/"
            "%(prop:buildername)s"
            "/"
        ),
    )
)
# create package and upload to master
f_windows_msi.addStep(steps.ShellCommand(command='dojob "dir"'))
f_windows_msi.addStep(
    steps.ShellCommand(
        name="sha256sums",
        command=[
            "powershell",
            "-command",
            'Get-ChildItem .\* -Include @("*.msi", "*.zip") | Get-FileHash | Select-Object Hash, @{Name="Name";Expression={[System.IO.Path]::GetFileName($_.Path)}} | Format-Table -HideTableHeaders | Out-File sha256sums.txt',
        ],
    )
)
f_windows_msi.addStep(
    steps.SetPropertyFromCommand(
        command=["dojob", '"', "dir /b *.msi *.zip", '"'], extract_fn=ls2list
    )
)
f_windows_msi.addStep(
    steps.MultipleFileUpload(
        workersrcs=util.Property("packages"),
        masterdest=util.Interpolate(
            "/srv/buildbot/packages/"
            + "%(prop:tarbuildnum)s"
            + "/"
            + "%(prop:buildername)s"
            + "/"
        ),
        mode=0o755,
        url=util.Interpolate(
            f'{os.environ["ARTIFACTS_URL"]}'
            "/"
            "%(prop:tarbuildnum)s"
            "/"
            "%(prop:buildername)s"
            "/"
        ),
        doStepIf=lambda step: savePackageIfBranchMatch(step, SAVED_PACKAGE_BRANCHES),
    )
)
f_windows_msi.addStep(
    steps.FileUpload(
        workersrc="sha256sums.txt",
        masterdest=util.Interpolate(
            "/srv/buildbot/packages/"
            + "%(prop:tarbuildnum)s"
            + "/"
            + "%(prop:buildername)s"
            + "/sha256sums.txt"
        ),
        mode=0o755,
        url=util.Interpolate(
            f'{os.environ["ARTIFACTS_URL"]}'
            "/"
            "%(prop:tarbuildnum)s"
            "/"
            "%(prop:buildername)s"
            "/"
        ),
        doStepIf=lambda step: savePackageIfBranchMatch(step, SAVED_PACKAGE_BRANCHES),
    )
)
f_windows_msi.addStep(
    steps.ShellCommand(
        name="cleanup",
        command=[
            "dojob",
            '"',
            "powershell",
            "-command",
            "Remove-Item",
            '"$pwd\*"',
            "-Recurse",
            "-Force",
            '"',
        ],
        alwaysRun=True,
    )
)

# f_wordpress
f_wordpress = util.BuildFactory()
f_wordpress.addStep(
    steps.ShellCommand(
        name="Create pod",
        command=[
            "sh",
            "-c",
            util.Interpolate("podman pod exists wptest || podman pod create -n wptest"),
        ],
    )
)
f_wordpress.addStep(
    steps.ShellCommand(
        name="Start MariaDB",
        command=[
            "podman",
            "run",
            "-d",
            "--pod",
            util.Interpolate("wptest"),
            "--name",
            util.Interpolate("mariadb"),
            "--env",
            "MARIADB_USER=wptest",
            "--env",
            "MARIADB_PASSWORD=wptest",
            "--env",
            "MARIADB_DATABASE=wptest",
            "--env",
            "MARIADB_RANDOM_ROOT_PASSWORD=1",
            "--health-cmd",
            "healthcheck.sh --connect",
            "--health-interval=4s",
            "--rm",
            util.Interpolate(
                "mariadb-%(prop:tarbuildnum)s-amd64%(prop:ubi)s-wordpress"
            ),
        ],
    )
)
f_wordpress.addStep(
    steps.ShellCommand(
        name="Wait until MariaDB started",
        command=[
            "sh",
            "-c",
            util.Interpolate(
                'until podman healthcheck run mariadb; do sleep 1; echo "not yet"; done; podman logs mariadb'
            ),
        ],
        maxTime=20,
    )
)
f_wordpress.addStep(
    steps.ShellCommand(
        name="Run WordPress test",
        command=[
            "podman",
            "run",
            "--pod",
            util.Interpolate("wptest"),
            "--rm",
            "--pull=always",
            "quay.io/mariadb-foundation/bb-ecosystem:wordpress_phpunit_test_runner",
        ],
    )
)
f_wordpress.addStep(
    steps.ShellCommand(
        name="Stop MariaDB",
        command=["podman", "kill", util.Interpolate("mariadb")],
        alwaysRun=True,
    )
)
f_wordpress.addStep(
    steps.ShellCommand(
        name="cleanup test image",
        command=[
            "podman",
            "untag",
            util.Interpolate(
                "mariadb-%(prop:tarbuildnum)s-amd64%(prop:ubi)s-wordpress"
            ),
        ],
        alwaysRun=True,
    )
)

# f_dockerlibrary
f_dockerlibrary = util.BuildFactory()
f_dockerlibrary.addStep(
    steps.ShellCommand(
        name="Update/Fetch Scripts",
        command=[
            "sh",
            "-xc",
            util.Interpolate(
                "for script in docker-library-build.sh docker-library-test.sh docker-library-manifest.sh; do curl https://raw.githubusercontent.com/MariaDB/buildbot/%(prop:scriptpath)s/scripts/${script} -o ${script} && chmod a+x $script ; done"
            ),
        ],
    )
)
f_dockerlibrary.addStep(
    steps.ShellCommand(
        name="building MariaDB docker library test image",
        env={
            "ARTIFACTS_URL": os.environ["ARTIFACTS_URL"]
        },
        command=[
            "bash",
            "-xc",
            util.Interpolate(
                './docker-library-build.sh "%(prop:tarbuildnum)s" "%(prop:mariadb_version)s" "%(prop:parentbuildername)s" "%(prop:revision)s" "%(prop:branch)s"'
            ),
        ],
    )
)
f_dockerlibrary.addStep(
    steps.ShellCommand(
        name="test MariaDB docker library image",
        command=[
            "bash",
            "-xc",
            util.Interpolate(
                './docker-library-test.sh "%(prop:tarbuildnum)s" "%(prop:parentbuildername)s"'
            ),
        ],
    )
)
f_dockerlibrary.addStep(
    steps.ShellCommand(
        name="build quay.io manifest image for MariaDB",
        command=[
            "bash",
            "-xc",
            util.Interpolate(
                './docker-library-manifest.sh "%(prop:tarbuildnum)s" "%(prop:mariadb_version)s" "%(prop:parentbuildername)s" "%(prop:revision)s" "%(prop:branch)s" "%(prop:push_containers)s"'
            ),
        ],
    )
)
f_dockerlibrary.addStep(
    steps.SetPropertyFromCommand(
        name="Extract the last tag created",
        command=[
            "bash",
            "-c",
            'if [ -f last_tag ]; then cat last_tag; rm last_tag; else echo ""; fi',
        ],
        property="lasttag",
    )
)
f_dockerlibrary.addStep(
    steps.Trigger(
        name="WordPress",
        schedulerNames=["s_wordpress"],
        waitForFinish=False,
        updateSourceStamp=False,
        set_properties={
            "tarbuildnum": Property("tarbuildnum"),
            "ubi": Property("ubi"),
        },
        doStepIf=lambda step: (str(step.getProperty("lasttag")) != ""),
    )
)
f_dockerlibrary.addStep(
    steps.SetPropertyFromCommand(
        name="Determine sha for the last tag",
        command=[
            "bash",
            "-xc",
            util.Interpolate(
                'curl -s "https://quay.io/api/v1/repository/mariadb-foundation/mariadb-devel/tag/?filter_tag_name=eq:%(prop:lasttag)s&onlyActiveTags=true" | jq -r .tags[0].manifest_digest'
            ),
        ],
        property="lastsha",
        doStepIf=lambda step: (
            step.getProperty("push_containers")
            and str(step.getProperty("lasttag")) != ""
        ),
    )
)
f_dockerlibrary.addStep(
    steps.ShellCommand(
        name="gh credentials",
        command=[
            "bash",
            "-xc",
            "gh auth login --with-token < ~/gh_auth",
        ],
        doStepIf=lambda step: (
            step.getProperty("push_containers")
            and str(step.getProperty("lastsha")) != "null"
            and step.hasProperty("lastsha")
        ),
    )
)

f_dockerlibrary.addStep(
    steps.ShellCommand(
        name="test operator with image",
        command=[
            "bash",
            "-xc",
            util.Interpolate(
                "gh workflow run %s --repo mariadb-operator/mariadb-operator -f mariadb_image=quay.io/mariadb-foundation/mariadb-devel@%s -f mariadb_version=%s",
                util.Property("GH_WORKFLOW", default="test-image.yml"),
                util.Property("lastsha"),
                util.Property("master_branch"),
            ),
        ],
        doStepIf=lambda step: (
            step.getProperty("push_containers")
            and str(step.getProperty("lastsha")) != "null"
            and step.hasProperty("lastsha")
        ),
    )
)

## f_aix
f_aix = util.BuildFactory()
f_aix.addStep(getSourceTarball())
f_aix.addStep(
    steps.ShellCommand(
        name="create html log file",
        command=[
            "bash",
            "-c",
            util.Interpolate(
                getHTMLLogString(), jobs=util.Property("jobs", default="6")
            ),
        ],
    )
)
f_aix.addStep(
    steps.ShellCommand(
        name="fetch build script",
        command=[
            "/opt/freeware/bin/curl",
            "--etag-compare",
            "aix-script-tag",
            "--etag-save",
            "aix-script-tag",
            "https://raw.githubusercontent.com/MariaDB/buildbot/main/scripts/aix-build-and-test.sh",
            "--output",
            "aix-build-and-test.sh",
        ],
    )
)
# build steps
f_aix.addStep(
    steps.Compile(
        command=[
            "sh",
            "-c",
            util.Interpolate(
                "chmod a+x ./aix-build-and-test.sh && ./aix-build-and-test.sh build %(prop:mariadb_version)s %(kw:build_type)s %(kw:jobs)s",
                build_type=util.Property("build_type", default="RelWithDebInfo"),
            ),
        ],
        haltOnFailure="true",
    )
)
f_aix.addStep(
    steps.MTR(
        logfiles={"mysqld*": "./buildbot/mysql_logs.html"},
        test_type="nm",
        command=[
            "sh",
            "-c",
            util.Interpolate("./aix-build-and-test.sh test %(prop:mariadb_version)s"),
        ],
        timeout=7200,
        haltOnFailure="true",
        parallel=mtrJobsMultiplier,
        dbpool=mtrDbPool,
        autoCreateTables=True,
        env=MTR_ENV,
    )
)
f_aix.addStep(
    steps.ShellCommand(
        name="move mariadb log files",
        alwaysRun=True,
        command=[
            "bash",
            "-c",
            util.Interpolate(moveMTRLogs(), jobs=util.Property("jobs", default="24")),
        ],
    )
)
f_aix.addStep(
    steps.ShellCommand(
        name="create var archive",
        alwaysRun=True,
        command=["bash", "-c", util.Interpolate(createVar())],
        doStepIf=hasFailed,
    )
)
f_aix.addStep(
    steps.ShellCommand(
        name="change permissions",
        alwaysRun=True,
        command=["bash", "-c", "chmod -R o+rx /buildbot/logs"],
    )
)
f_aix.addStep(
    steps.DirectoryUpload(
        name="save mariadb log files",
        compress="bz2",
        alwaysRun=True,
        workersrc="/buildbot/logs/",
        masterdest=util.Interpolate(
            "/srv/buildbot/packages/"
            + "%(prop:tarbuildnum)s"
            + "/logs/"
            + "%(prop:buildername)s"
        ),
    )
)
f_aix.addStep(
    steps.ShellCommand(
        name="cleanup", command="./aix-build-and-test.sh clean", alwaysRun=True
    )
)


## f_macos
def get_macos_factory(compile_only=False):
    f_macos = util.BuildFactory()
    f_macos.addStep(getSourceTarball())
    f_macos.addStep(
        steps.ShellCommand(
            name="create html log file",
            command=[
                "bash",
                "-c",
                util.Interpolate(
                    getHTMLLogString(base_path="./buildbot_logs"),
                    jobs=util.Property("jobs", default="6"),
                ),
            ],
        )
    )
    f_macos.addStep(
        steps.Compile(
            command=[
                "sh",
                "-c",
                util.Interpolate(
                    "cmake . -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_JEMALLOC=/usr/local/opt/jemalloc -DPLUGIN_TOKUDB=NO -DPLUGIN_MROONGA=NO -DPLUGIN_SPIDER=YES -DPLUGIN_OQGRAPH=NO -DPLUGIN_PERFSCHEMA=%(kw:perf_schema)s -DPLUGIN_SPHINX=NO %(kw:additional_args)s && cmake --build . %(kw:verbose_build)s --parallel %(kw:jobs)s",
                    perf_schema=util.Property("perf_schema", default="YES"),
                    jobs=util.Property("jobs", default="$(getconf _NPROCESSORS_ONLN)"),
                    additional_args=util.Property("additional_args", default=""),
                    verbose_build=util.Property("verbose_build", default=""),
                ),
            ],
            haltOnFailure="true",
        )
    )
    if not compile_only:
        f_macos.addStep(
            steps.MTR(
                logfiles={"mysqld*": "./buildbot_logs/mysql_logs.html"},
                test_type="nm",
                command=[
                    "sh",
                    "-c",
                    util.Interpolate(
                        """
                cd mysql-test &&
                exec perl mysql-test-run.pl --verbose-restart --force --retry=3 --max-save-core=2 --max-save-datadir=10 --max-test-fail=20 --parallel=$(expr %(kw:jobs)s \* 2) %(kw:mtr_additional_args)s
                """,
                        mtr_additional_args=util.Property(
                            "mtr_additional_args", default=""
                        ),
                        jobs=util.Property(
                            "jobs", default="$(getconf _NPROCESSORS_ONLN)"
                        ),
                    ),
                ],
                timeout=950,
                haltOnFailure=False,
                flunkOnFailure=False,
                warnOnFailure=True,
                parallel=mtrJobsMultiplier,
                dbpool=mtrDbPool,
                autoCreateTables=True,
                env=MTR_ENV,
            )
        )
        f_macos.addStep(
            steps.ShellCommand(
                name="move mariadb log files",
                alwaysRun=True,
                command=[
                    "bash",
                    "-c",
                    util.Interpolate(
                        moveMTRLogs(base_path="./buildbot_logs"),
                        jobs=util.Property("jobs", default="24"),
                    ),
                ],
            )
        )
        f_macos.addStep(
            steps.ShellCommand(
                name="create var archive",
                alwaysRun=True,
                command=[
                    "bash",
                    "-c",
                    util.Interpolate(createVar(base_path="./buildbot_logs")),
                ],
                doStepIf=hasFailed,
            )
        )
        f_macos.addStep(
            steps.ShellCommand(
                name="change permissions",
                alwaysRun=True,
                command=["bash", "-c", "chmod -R o+rx ./buildbot_logs/logs"],
            )
        )
        f_macos.addStep(
            steps.DirectoryUpload(
                name="save mariadb log files",
                compress="bz2",
                alwaysRun=True,
                workersrc="./buildbot_logs/logs/",
                masterdest=util.Interpolate(
                    "/srv/buildbot/packages/"
                    + "%(prop:tarbuildnum)s"
                    + "/logs/"
                    + "%(prop:buildername)s"
                ),
            )
        )
    f_macos.addStep(
        steps.ShellCommand(
            name="cleanup",
            command="rm -r * .*i ./packages/* ./buildbot_logs/* /System/Volumes/Data/cores/* 2> /dev/null || true",
            alwaysRun=True,
        )
    )
    return f_macos


# f_freebsd
f_freebsd = getQuickBuildFactory("nm", mtrDbPool)

####### BUILDERS LIST
c["builders"] = []

c["builders"].append(
    util.BuilderConfig(
        name=os.environ["MASTER_NONLATENT_DOCKERLIBRARY_WORKER"]
        .replace("bb", "amd64")
        .replace("docker", "wordpress"),
        workernames=[
            os.environ["MASTER_NONLATENT_DOCKERLIBRARY_WORKER"]
        ],
        tags=["RHEL"],
        collapseRequests=True,
        nextBuild=nextBuild,
        canStartBuild=canStartBuild,
        factory=f_wordpress,
    )
)

c["builders"].append(
    util.BuilderConfig(
        name=os.environ["MASTER_NONLATENT_DOCKERLIBRARY_WORKER"].replace("bb", "amd64")
        + "library",
        workernames=[
            os.environ["MASTER_NONLATENT_DOCKERLIBRARY_WORKER"]
        ],
        tags=["RHEL"],
        collapseRequests=True,
        nextBuild=nextBuild,
        canStartBuild=canStartBuild,
        factory=f_dockerlibrary,
        properties={"push_containers": os.environ["ENVIRON"] != "DEV"},
    )
)

c["builders"].append(
    util.BuilderConfig(
        name="amd64-windows",
        workernames=["bbw2-windows"],
        tags=["Windows", "quick", "protected"],
        collapseRequests=True,
        nextBuild=nextBuild,
        factory=f_windows,
    )
)

c["builders"].append(
    util.BuilderConfig(
        name="amd64-windows-packages",
        workernames=["bbw1-windows"],
        tags=["Windows", "packages", "zip"],
        collapseRequests=True,
        nextBuild=nextBuild,
        factory=f_windows_msi,
    )
)

c["builders"].append(
    util.BuilderConfig(
        name="ppc64be-aix-71",
        workernames=["aix-worker"],
        tags=["AIX 7.1", "quick", "gcc", "experimental"],
        collapseRequests=True,
        nextBuild=nextBuild,
        canStartBuild=canStartBuild,
        factory=f_aix,
    )
)

c["builders"].append(
    util.BuilderConfig(
        name="aarch64-macos",
        workernames=["bbw1-mac", "bbw2-mac"],
        tags=["MacOS", "quick", "experimental"],
        collapseRequests=True,
        nextBuild=nextBuild,
        factory=get_macos_factory(),
    )
)

c["builders"].append(
    util.BuilderConfig(
        name="aarch64-macos-compile-only",
        workernames=["bbw1-mac", "bbw2-mac"],
        tags=["MacOS", "quick", "protected"],
        collapseRequests=True,
        nextBuild=nextBuild,
        factory=get_macos_factory(compile_only=True),
    )
)


c["builders"].append(
    util.BuilderConfig(
        name="amd64-freebsd-14",
        workernames=["hz-freebsd-bbw1"],
        tags=["FreeBSD", "quick", "experimental"],
        collapseRequests=True,
        properties={
            "additional_args": "-DPLUGIN_ROCKSDB=NO",
            "c_compiler": "clang",
            "cxx_compiler": "clang++",
            "mtr_env": {
                "WSREP_PROVIDER": "/usr/local/lib/libgalera_smm.so",
            },
        },
        nextBuild=nextBuild,
        factory=f_freebsd,
    )
)

# Add a Janitor configurator that removes old logs
c["configurators"] = [util.JanitorConfigurator(logHorizon=timedelta(weeks=6), hour=23)]

c["logEncoding"] = "utf-8"

c["multiMaster"] = True

c["mq"] = {  # Need to enable multimaster aware mq. Wamp is the only option for now.
    "type": "wamp",
    "router_url": os.environ["MQ_ROUTER_URL"],
    "realm": "realm1",
    # valid are: none, critical, error, warn, info, debug, trace
    "wamp_debug_level": "info",
}
