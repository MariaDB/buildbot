---
name: bbw-build-container

on:
  push:
    paths:
      - .github/workflows/bbw_build_container.yml
      - "ci_build_images/**"
  pull_request:
    paths:
      - .github/workflows/bbw_build_container.yml
      - "ci_build_images/**"

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    name: ${{ matrix.image }} (${{ matrix.tag }} ${{ matrix.platforms }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: centos.Dockerfile
            image: almalinux:8
            platforms: linux/amd64, linux/arm64/v8
          - dockerfile: centos.Dockerfile pip.Dockerfile
            image: almalinux:9
            platforms: linux/amd64, linux/arm64/v8
          - dockerfile: debian.Dockerfile
            image: debian:11
            branch: 10.11
            platforms: linux/amd64, linux/arm64/v8, linux/ppc64le
          - dockerfile: debian.Dockerfile
            image: debian:12
            tag: debian12
            branch: 10.11
            platforms: linux/amd64, linux/arm64/v8, linux/ppc64le
          - dockerfile: debian.Dockerfile
            image: debian:12
            tag: debian12-386
            branch: 10.11
            platforms: linux/386
          - dockerfile: debian.Dockerfile aocc.Dockerfile
            image: debian:11
            tag: debian11-aocc
            branch: 10.11
            platforms: linux/amd64
          - dockerfile: debian.Dockerfile msan.Dockerfile
            image: debian:11
            branch: 10.11
            tag: debian11-msan
            clang_version: 15
            platforms: linux/amd64
          - dockerfile: debian.Dockerfile msan.Dockerfile
            image: debian:11
            branch: 10.11
            tag: debian11-msan-clang-16
            clang_version: 16
            platforms: linux/amd64
          - dockerfile: debian.Dockerfile
            image: debian:sid
            branch: 10.11
            platforms: linux/amd64, linux/arm64/v8, linux/ppc64le
          - dockerfile: debian.Dockerfile
            image: debian:sid
            tag: debiansid-386
            branch: 10.11
            platforms: linux/386
          - dockerfile: debian.Dockerfile
            image: ubuntu:20.04
            branch: 10.11
            platforms: linux/amd64, linux/arm64/v8, linux/ppc64le, linux/s390x
          - dockerfile: debian.Dockerfile
            image: ubuntu:22.04
            branch: 10.11
            platforms: linux/amd64, linux/arm64/v8, linux/ppc64le, linux/s390x
          - dockerfile: debian.Dockerfile
            image: ubuntu:23.10
            branch: 10.11
            platforms: linux/amd64, linux/arm64/v8
          - dockerfile: debian.Dockerfile
            image: ubuntu:24.04
            branch: 10.11
            platforms: linux/amd64, linux/arm64/v8, linux/ppc64le, linux/s390x
          - dockerfile: fedora.Dockerfile
            image: fedora:38
            platforms: linux/amd64, linux/arm64/v8
          - dockerfile: fedora.Dockerfile
            image: fedora:39
            platforms: linux/amd64, linux/arm64/v8
          - dockerfile: fedora.Dockerfile
            image: fedora:40
            platforms: linux/amd64, linux/arm64/v8
          - dockerfile: centos7.Dockerfile pip.Dockerfile
            image: centos:7
            platforms: linux/amd64
          - dockerfile: centos.Dockerfile pip.Dockerfile
            image: quay.io/centos/centos:stream9
            tag: centosstream9
            platforms: linux/amd64, linux/arm64/v8, linux/ppc64le
            # //TEMP Error: Unable to find a match: ccache python3-scons (on
            # s390x)
            # platforms: linux/amd64, linux/arm64/v8, linux/ppc64le, linux/s390x
          - dockerfile: opensuse.Dockerfile pip.Dockerfile
            image: opensuse/leap:15.6
            tag: opensuse15
            platforms: linux/amd64
          - dockerfile: sles.Dockerfile pip.Dockerfile
            image: registry.suse.com/bci/bci-base:15.6
            tag: sles15
            platforms: linux/amd64, linux/s390x
          - dockerfile: centos.Dockerfile
            image: rockylinux:8
            platforms: linux/amd64, linux/arm64/v8
          - dockerfile: centos.Dockerfile pip.Dockerfile
            image: rockylinux:9
            platforms: linux/amd64, linux/arm64/v8
          - dockerfile: debian.Dockerfile jepsen-mysql.Dockerfile
            image: ubuntu:22.04
            branch: 10.11
            platforms: linux/amd64
            tag: ubuntu22.04-jepsen-mysql
    env:
      BUILD_RHEL: false
      DEPLOY_IMAGES: false
      WORKDIR: ci_build_images

    steps:
      - uses: actions/checkout@v4
      - name: Set up env vars
        run: |
          set -vx
          [[ -n "${{ matrix.image }}" ]] || {
            echo "Missing base image (FROM)"
            exit 1
          }
          if [[ -n "${{ matrix.tag }}" ]]; then
            echo "IMG=${{ matrix.tag }}" >>$GITHUB_ENV
          else
            TAG_TMP=${{ matrix.image }}
            echo "IMG=${TAG_TMP/:/}" >>$GITHUB_ENV
          fi
          echo "REPO=bb-worker" >>$GITHUB_ENV
      - name: Generate Dockerfile and necessary files
        run: |
          cd ${{ env.WORKDIR }}
          cat ${{ matrix.dockerfile }} qpress.Dockerfile buildbot-worker.Dockerfile >$GITHUB_WORKSPACE/Dockerfile
          cp -r qpress $GITHUB_WORKSPACE
      - name: opensuse extra
        if: contains(matrix.tag, 'opensuse') || contains(matrix.tag, 'sles')
        run: |
          cp ${{ env.WORKDIR }}/mariadb_zypper_expect $GITHUB_WORKSPACE
      - name: No wsrep on 32 bit platforms
        if: >
          (contains(matrix.platforms, 'linux/386'))
        run: |
          sed -i -e '/WSREP_PROVIDER/d' $GITHUB_WORKSPACE/Dockerfile
      - name: Check Dockerfile with hadolint
        run: |
          docker run -i -v $(pwd):/mnt -w /mnt ghcr.io/hadolint/hadolint:latest hadolint /mnt/Dockerfile
      - name: Install qemu-user-static
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static
      - name: Build with Buildah
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.REPO }}
          tags: ${{ env.IMG }}
          build-args:
            - BASE_IMAGE=${{ matrix.image }}
            - CLANG_VERSION=${{ matrix.clang_version }}
            - MARIADB_BRANCH=${{ matrix.branch }}
          containerfiles: \
            Dockerfile
          context: ${{ env.WORKDIR }}
          archs: ${{ matrix.archs }}
          oci: true
          extra-args: --ulimit nofile=16384:16384
      - name: Check multi-arch container
        run: |
          image="${{ env.REPO }}:${{ env.IMG }}"
          for p in ${{ matrix.platforms }}; do
            platform="${p/,/}"
            echo "Testing docker image $image on platform $platform"
            docker run --platform=$platform --rm -i "$image" buildbot-worker --version
            docker run --platform=$platform --rm -i "$image" dumb-init twistd --pidfile= -y /home/buildbot/buildbot.tac
            docker run --platform=$platform --rm -u root -i "$image" bash -c "touch /tmp/foo && qpress -r /tmp /root/qpress.qp"
          done
      - name: Check for registry credentials
        run: |
          missing=()
          [[ -n "${{ secrets.QUAY_USER }}" ]] || missing+=(QUAY_USER)
          [[ -n "${{ secrets.QUAY_TOKEN }}" ]] || missing+=(QUAY_TOKEN)
          for i in "${missing[@]}"; do
            echo "Missing github secret: $i"
          done
          if (( ${#missing[@]} == 0 )); then
            echo "DEPLOY_IMAGES=true" >> $GITHUB_ENV
          else
            echo "Not pushing images to registry"
          fi
      - name: Push images to ghcr.io
        if: ${{ env.DEPLOY_IMAGES == 'true' }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ env.REPO }}
          tags: ${{ env.IMG }}
          registry: ghcr.io/${GITHUB_REPOSITORY,,}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Check for registry credentials
        if: >
          github.ref == 'refs/heads/main' &&
          github.repository == 'MariaDB/buildbot'
        run: |
          missing=()
          [[ -n "${{ secrets.QUAY_USER }}" ]] || missing+=(QUAY_USER)
          [[ -n "${{ secrets.QUAY_TOKEN }}" ]] || missing+=(QUAY_TOKEN)
          for i in "${missing[@]}"; do
            echo "Missing github secret: $i"
          done
          if (( ${#missing[@]} == 0 )); then
            echo "DEPLOY_IMAGES=true" >> $GITHUB_ENV
          else
            echo "Not pushing images to registry"
          fi
      - name: Push To quay.io
        id: push-to-quay
        if: ${{ env.DEPLOY_IMAGES == 'true' }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ env.REPO }}
          tags: ${{ env.IMG }}
          registry: quay.io/mariadb-foundation
          username: ${{ secrets.QUAY_USER }}
          password: ${{ secrets.QUAY_TOKEN }}
