# -*- python -*-
# ex: set filetype=python:
import os
from collections import defaultdict
from dataclasses import dataclass
from typing import Iterable

from buildbot.plugins import steps, util
from buildbot.process.buildstep import BuildStep
from buildbot.process.factory import BuildFactory
from common_factories import getSourceTarball
from constants import MTR_ENV, SAVED_PACKAGE_BRANCHES, TEST_TYPE_TO_MTR_ARG
from locks import getLocks
from master_common import base_master_config
from utils import (
    canStartBuild,
    createVar,
    createWorker,
    dockerfile,
    filterBranch,
    getHTMLLogString,
    hasFailed,
    moveMTRLogs,
    mtrJobsMultiplier,
    nextBuild,
    printEnv,
    read_template,
    saveLogs,
    savePackageIfBranchMatch,
)

cfg_dir = os.path.abspath(os.path.dirname(__file__))

# Non autogen master. For now the directory structure is:
# <srcdir>
# └── <master-name>
#     ├── buildbot.tac
#     └── master.cfg
#
# Non autogen masters load from <srcdir> for now.
base_dir = os.path.abspath(f"{cfg_dir}/../")

# Load the slave, database passwords and 3rd-party tokens from an external private file, so
# that the rest of the configuration can be public.
config = {"private": {}}
with open(os.path.join(base_dir, "master-private.cfg"), "r") as file:
    exec(file.read(), config, {})


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = base_master_config(config)

mtrDbPool = util.EqConnectionPool(
    "MySQLdb",
    config["private"]["db_host"],
    config["private"]["db_user"],
    config["private"]["db_password"],
    config["private"]["db_mtr_db"],
)

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c["workers"] = []

workers = defaultdict(list)


def addWorker(
    worker_name_prefix,
    worker_id,
    worker_type,
    dockerfile,
    jobs=5,
    save_packages=False,
    shm_size="15G",
):
    base_name, name, instance = createWorker(
        worker_name_prefix,
        worker_id,
        worker_type,
        dockerfile,
        jobs,
        save_packages,
        shm_size,
    )

    workers[base_name].append(name)
    c["workers"].append(instance)


for full_test_worker in ["debian-12-32-bit", "debian-12-32-bit-debug"]:
    for worker_index, worker_name in enumerate(["amd-bbw", "amd-bbw", "apexis-bbw"]):
        addWorker(
            worker_name,
            worker_index + 1,
            full_test_worker,
            os.environ["CONTAINER_REGISTRY_URL"] + "debian12-386",
            jobs=10,
            save_packages=False,
            shm_size="30G",
        )

addWorker(
    "apexis-bbw",
    3,
    "msan-clang-debian-11",
    os.environ["CONTAINER_REGISTRY_URL"] + "debian11-msan",
    jobs=20,
    save_packages=False,
)

addWorker(
    "apexis-bbw",
    3,
    "ubuntu-2204-jepsen-mariadb",
    os.environ["CONTAINER_REGISTRY_URL"] + "ubuntu22.04-jepsen-mariadb",
    jobs=5,
    save_packages=False,
)

####### FACTORY CODE

## f_asan_ubsan_build
f_asan_ubsan_build = util.BuildFactory()
f_asan_ubsan_build.addStep(printEnv())
f_asan_ubsan_build.addStep(
    steps.SetProperty(
        property="dockerfile",
        value=util.Interpolate("%(kw:url)s", url=dockerfile),
        description="dockerfile",
    )
)
f_asan_ubsan_build.addStep(getSourceTarball())
f_asan_ubsan_build.addStep(
    steps.ShellCommand(
        name="create html log file",
        command=[
            "bash",
            "-c",
            util.Interpolate(
                getHTMLLogString(),
                jobs=util.Property("jobs", default="$(getconf _NPROCESSORS_ONLN)"),
            ),
        ],
    )
)
# build steps
f_asan_ubsan_build.addStep(
    steps.ShellCommand(
        command='echo "leak:libtasn1\nleak:libgnutls\nleak:libgmp" > mysql-test/lsan.supp',
        doStepIf=filterBranch,
    )
)
f_asan_ubsan_build.addStep(
    steps.ShellCommand(command="cat mysql-test/lsan.supp", doStepIf=filterBranch)
)
f_asan_ubsan_build.addStep(
    steps.Compile(
        command=[
            "sh",
            "-c",
            util.Interpolate(
                "cmake . -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=Debug -DWITH_ASAN=YES -DWITH_UBSAN=YES -DPLUGIN_TOKUDB=NO -DPLUGIN_MROONGA=NO -DPLUGIN_OQGRAPH=NO -DPLUGIN_ROCKSDB=NO -DPLUGIN_CONNECT=NO -DWITH_SAFEMALLOC=OFF -DWITH_ZLIB=bundled -DWITH_SSL=bundled -DWITH_DBUG_TRACE=OFF -DWITH_SAFEMALLOC=OFF && make VERBOSE=1 -j%(kw:jobs)s package",
                jobs=util.Property("jobs", default="$(getconf _NPROCESSORS_ONLN)"),
            ),
        ],
        haltOnFailure="true",
    )
)
f_asan_ubsan_build.addStep(
    steps.MTR(
        logfiles={"mysqld*": "./buildbot/mysql_logs.html", "syslog": "/var/log/syslog"},
        test_type="ubsan",
        command=[
            "sh",
            "-c",
            util.Interpolate(
                'cd mysql-test && MTR_FEEDBACK_PLUGIN=1 ASAN_OPTIONS="abort_on_error=1" LSAN_OPTIONS="print_suppressions=0,suppressions=`pwd`/lsan.supp" perl mysql-test-run.pl --verbose-restart --force --retry=3 --max-save-core=2 --max-save-datadir=10 --max-test-fail=20 --mem --parallel=$(expr %(kw:jobs)s \* 2)',
                jobs=util.Property("jobs", default="$(getconf _NPROCESSORS_ONLN)"),
            ),
        ],
        timeout=950,
        haltOnFailure="true",
        parallel=mtrJobsMultiplier,
        dbpool=mtrDbPool,
        autoCreateTables=True,
        env=MTR_ENV,
    )
)
f_asan_ubsan_build.addStep(
    steps.ShellCommand(
        name="move mysqld log files",
        alwaysRun=True,
        command=[
            "bash",
            "-c",
            util.Interpolate(
                moveMTRLogs(),
                jobs=util.Property("jobs", default="$(getconf _NPROCESSORS_ONLN)"),
            ),
        ],
    )
)
f_asan_ubsan_build.addStep(
    steps.ShellCommand(
        name="create var archive",
        alwaysRun=True,
        command=["bash", "-c", util.Interpolate(createVar())],
        doStepIf=hasFailed,
    )
)
f_asan_ubsan_build.addStep(
    steps.DirectoryUpload(
        name="save mysqld log files",
        compress="bz2",
        alwaysRun=True,
        workersrc="./buildbot/logs/",
        masterdest=util.Interpolate(
            "/srv/buildbot/packages/"
            + "%(prop:tarbuildnum)s"
            + "/logs/"
            + "%(prop:buildername)s"
        ),
    )
)
f_asan_ubsan_build.addStep(
    steps.ShellCommand(
        name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True
    )
)

## f_msan_build
f_msan_build = util.BuildFactory()
f_msan_build.addStep(printEnv())
f_msan_build.addStep(
    steps.SetProperty(
        property="dockerfile",
        value=util.Interpolate("%(kw:url)s", url=dockerfile),
        description="dockerfile",
    )
)
f_msan_build.addStep(
    steps.ShellCommand(
        name="create html log file",
        command=[
            "bash",
            "-c",
            util.Interpolate(
                getHTMLLogString(),
                jobs=util.Property("jobs", default="$(getconf _NPROCESSORS_ONLN)"),
            ),
        ],
    )
)
f_msan_build.addStep(getSourceTarball())
# build steps
f_msan_build.addStep(steps.ShellCommand(command="ls /msan-libs"))
f_msan_build.addStep(
    steps.Compile(
        command=[
            "bash",
            "-xc",
            util.Interpolate(
                'cmake . -DCMAKE_C_COMPILER=%(kw:c_compiler)s -DCMAKE_CXX_COMPILER=%(kw:cxx_compiler)s -DCMAKE_C_FLAGS="-O2 -Wno-unused-command-line-argument -fdebug-macro" -DCMAKE_CXX_FLAGS="-stdlib=libc++ -O2 -Wno-unused-command-line-argument -fdebug-macro" -DWITH_EMBEDDED_SERVER=OFF -DWITH_UNIT_TESTS=OFF -DCMAKE_BUILD_TYPE=Debug -DWITH_INNODB_{BZIP2,LZ4,LZMA,LZO,SNAPPY}=OFF -DPLUGIN_{ARCHIVE,TOKUDB,MROONGA,OQGRAPH,ROCKSDB,CONNECT,SPIDER}=NO -DWITH_SAFEMALLOC=OFF -DWITH_{ZLIB,SSL,PCRE}=bundled -DHAVE_LIBAIO_H=0 -DCMAKE_DISABLE_FIND_PACKAGE_{URING,LIBAIO}=1 -DWITH_MSAN=ON -DWITH_DBUG_TRACE=OFF && make -j%(kw:jobs)s package',
                jobs=util.Property("jobs", default="$(getconf _NPROCESSORS_ONLN)"),
                c_compiler=util.Property("c_compiler", default="clang"),
                cxx_compiler=util.Property("cxx_compiler", default="clang++"),
            ),
        ],
        haltOnFailure="true",
    )
)
f_msan_build.addStep(
    steps.MTR(
        logfiles={"mysqld*": "./buildbot/mysql_logs.html"},
        test_type="msan",
        command=[
            "bash",
            "-xc",
            util.Interpolate(
                'cd mysql-test && LD_LIBRARY_PATH=/msan-libs MSAN_OPTIONS=abort_on_error=1:poison_in_dtor=0 ./mtr --mem --big-test --force --retry=0 --skip-test=".*compression.*|rpl\.rpl_non_direct_row_mixing_engines|perfschema\.table_io_aggregate_hist_\du_\dt|perfschema\.transaction_nested_events|perfschema\.events_waits_current_MDEV-29091|perfschema\.memory_aggregate_no_a_no_u_no_h|main\.show_explain|main\.show_analyze_json" --max-test-fail=100 --parallel=$(expr %(kw:jobs)s \* 2)',
                jobs=util.Property("jobs", default="$(getconf _NPROCESSORS_ONLN)"),
            ),
        ],
        timeout=950,
        haltOnFailure="true",
        parallel=mtrJobsMultiplier,
        dbpool=mtrDbPool,
        autoCreateTables=True,
        env=MTR_ENV,
    )
)
f_msan_build.addStep(
    steps.ShellCommand(
        name="move mysqld log files",
        alwaysRun=True,
        command=[
            "bash",
            "-c",
            util.Interpolate(
                moveMTRLogs(),
                jobs=util.Property("jobs", default="$(getconf _NPROCESSORS_ONLN)"),
            ),
        ],
    )
)
f_msan_build.addStep(
    steps.ShellCommand(
        name="create var archive",
        alwaysRun=True,
        command=["bash", "-c", util.Interpolate(createVar())],
        doStepIf=hasFailed,
    )
)
f_msan_build.addStep(
    steps.DirectoryUpload(
        name="save mysqld log files",
        compress="bz2",
        alwaysRun=True,
        workersrc="./buildbot/logs/",
        masterdest=util.Interpolate(
            "/srv/buildbot/packages/"
            + "%(prop:tarbuildnum)s"
            + "/logs/"
            + "%(prop:buildername)s"
        ),
    )
)
f_msan_build.addStep(
    steps.ShellCommand(
        name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True
    )
)

## f_big_test
f_big_test = util.BuildFactory()
f_big_test.addStep(printEnv())
f_big_test.addStep(
    steps.SetProperty(
        property="dockerfile",
        value=util.Interpolate("%(kw:url)s", url=dockerfile),
        description="dockerfile",
    )
)
f_big_test.addStep(
    steps.ShellCommand(
        name="create html log file",
        command=[
            "bash",
            "-c",
            util.Interpolate(
                getHTMLLogString(),
                jobs=util.Property("jobs", default="$(getconf _NPROCESSORS_ONLN)"),
            ),
        ],
    )
)
# get the source tarball and extract it
f_big_test.addStep(getSourceTarball())
# build steps
f_big_test.addStep(
    steps.Compile(
        command=[
            "sh",
            "-c",
            util.Interpolate(
                "export PATH=/usr/lib/ccache:/usr/lib64/ccache:$PATH && cmake . -DCMAKE_BUILD_TYPE=RelWithDebInfo  -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DPLUGIN_ROCKSDB=NO -DPLUGIN_TOKUDB=NO -DPLUGIN_MROONGA=NO -DPLUGIN_SPIDER=NO -DPLUGIN_OQGRAPH=NO -DPLUGIN_SPHINX=NO && make -j%(kw:jobs)s VERBOSE=1 package",
                jobs=util.Property("jobs", default="$(getconf _NPROCESSORS_ONLN)"),
            ),
        ],
        env={"CCACHE_DIR": "/mnt/ccache"},
    )
)
f_big_test.addStep(
    steps.MTR(
        logfiles={"mysqld*": "./buildbot/mysql_logs.html"},
        test_type="nm",
        command=[
            "sh",
            "-c",
            util.Interpolate(
                "cd mysql-test && exec perl mysql-test-run.pl --verbose-restart --force --retry=3 --max-save-core=2 --max-save-datadir=10 --max-test-fail=20 --big --mem --parallel=$(expr %(kw:jobs)s \* 2) --skip-test=archive.archive-big",
                jobs=util.Property("jobs", default="$(getconf _NPROCESSORS_ONLN)"),
            ),
        ],
        timeout=950,
        dbpool=mtrDbPool,
        parallel=mtrJobsMultiplier,
        env=MTR_ENV,
    )
)
f_big_test.addStep(
    steps.ShellCommand(
        name="move mysqld log files",
        alwaysRun=True,
        command=[
            "bash",
            "-c",
            util.Interpolate(
                moveMTRLogs(),
                jobs=util.Property("jobs", default="$(getconf _NPROCESSORS_ONLN)"),
            ),
        ],
    )
)
f_big_test.addStep(
    steps.ShellCommand(
        name="create var archive",
        alwaysRun=True,
        command=["bash", "-c", util.Interpolate(createVar())],
        doStepIf=hasFailed,
    )
)
f_big_test.addStep(
    steps.DirectoryUpload(
        name="save mysqld log files",
        compress="bz2",
        alwaysRun=True,
        workersrc="./buildbot/logs/",
        masterdest=util.Interpolate(
            "/srv/buildbot/packages/"
            + "%(prop:tarbuildnum)s"
            + "/logs/"
            + "%(prop:buildername)s"
        ),
    )
)
# create package and upload to master
f_big_test.addStep(
    steps.SetPropertyFromCommand(
        command="basename mariadb-*-linux-*.tar.gz", property="mariadb_binary"
    )
)
f_big_test.addStep(
    steps.ShellCommand(
        name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True
    )
)

## f_jepsen_mariadb
f_jepsen_mariadb = util.BuildFactory()
f_jepsen_mariadb.addStep(printEnv())
f_jepsen_mariadb.addStep(
    steps.ShellCommand(
        name="create html log file",
        command=[
            "bash",
            "-c",
            util.Interpolate(
                getHTMLLogString(),
                jobs=util.Property("jobs", default="$(getconf _NPROCESSORS_ONLN)"),
            ),
        ],
    )
)
# get the source tarball and extract it
f_jepsen_mariadb.addStep(getSourceTarball())
# build steps
f_jepsen_mariadb.addStep(
    steps.Compile(
        command=[
            "bash",
            "-c",
            util.Interpolate(
                "export PATH=/usr/lib/ccache:/usr/lib64/ccache:$PATH && cmake . -DPLUGIN_{ARCHIVE,TOKUDB,MROONGA,OQGRAPH,ROCKSDB,CONNECT,SPIDER,SPHINX,COLUMNSTORE,PERFSCHEMA,XPAND}=NO -DWITH_SAFEMALLOC=OFF -DCMAKE_BUILD_TYPE=RelWithDebinfo -DCMAKE_INSTALL_PREFIX=$PREFIX && make -j%(kw:jobs)s install",
                jobs=util.Property("jobs", default="$(getconf _NPROCESSORS_ONLN)"),
            ),
        ],
        env={"CCACHE_DIR": "/mnt/ccache", "PREFIX": "/home/buildbot/mariadb-bin"},
    )
)
f_jepsen_mariadb.addStep(
    steps.ShellCommand(
        name="test",
        command=[
            "bash",
            "-c",
            util.Interpolate(read_template("jepsen_mariadb")),
        ],
        workdir="/home/buildbot/jepsen-mariadb",
    )
)
f_jepsen_mariadb.addStep(
    steps.ShellCommand(
        name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True
    )
)


@dataclass
class TestConfig:
    test_type: str
    extra_args: str = ""
    cmd_prefix: str = ""
    parallel: str = "--parallel=$(expr %(kw:jobs)s \\* 2)"

    @property
    def mtr_test_args(self):
        return TEST_TYPE_TO_MTR_ARG[self.test_type]


# Define a function to add test steps to a factory
def add_test_steps(factory: BuildFactory, test_configs: Iterable[TestConfig]):
    def run_vault(step: BuildStep) -> bool:
        return all(
            item not in str(step.getProperty("master_branch"))
            for item in ["10.5", "10.6"]
        )

    for test_config in test_configs:
        runStep = (
            run_vault
            if test_config.test_type == "vault"
            else lambda step_instance: True
        )
        output_dir = test_config.test_type
        # Common command before customizing per test_type
        command_base = "cd mysql-test && MTR_FEEDBACK_PLUGIN=1 perl mysql-test-run.pl --verbose-restart --force --retry=3 --max-save-core=2 --max-save-datadir=10 --mem"
        # Add steps for running MTR, moving logs, and creating archives

        factory.addStep(
            steps.MTR(
                logfiles={"mysqld*": "./buildbot/mysql_logs.html"},
                name=f"test {test_config.test_type}",
                test_type=test_config.test_type,
                command=[
                    "sh",
                    "-c",
                    util.Interpolate(
                        f"{test_config.cmd_prefix} {command_base} {test_config.mtr_test_args} {test_config.extra_args} {test_config.parallel}",
                        jobs=util.Property(
                            "jobs", default="$(getconf _NPROCESSORS_ONLN)"
                        ),
                    ),
                ],
                timeout=3600,
                dbpool=mtrDbPool,
                parallel=mtrJobsMultiplier,
                env=MTR_ENV,
                doStepIf=runStep,
            )
        )
        factory.addStep(
            steps.ShellCommand(
                name=f"move mysqld log files {test_config.test_type}",
                alwaysRun=True,
                command=[
                    "bash",
                    "-c",
                    util.Interpolate(
                        moveMTRLogs(output_dir=output_dir),
                        jobs=util.Property(
                            "jobs", default="$(getconf _NPROCESSORS_ONLN)"
                        ),
                    ),
                ],
                doStepIf=runStep,
            )
        )
        factory.addStep(
            steps.ShellCommand(
                name=f"create var archive {test_config.test_type}",
                alwaysRun=True,
                command=[
                    "bash",
                    "-c",
                    util.Interpolate(createVar(output_dir=output_dir)),
                ],
                doStepIf=lambda step: hasFailed(step) and runStep(step),
            )
        )


DEFAULT_FULLTEST_MTR_CONFIGS = [
    TestConfig("nm"),
    TestConfig("nm_engines"),
    TestConfig("nm_func_1_2"),
    TestConfig("emb"),
    TestConfig("ps"),
    TestConfig("emb-ps"),
    TestConfig("optimizer_trace"),
    TestConfig(
        "s3", cmd_prefix="minio server /tmp/minio > /dev/null 2>&1 & sleep 5 &&"
    ),
    TestConfig(
        "vault",
        parallel="--parallel=1",
        cmd_prefix="vault server -dev > /dev/null 2>&1 & sleep 5 &&",
    ),
    TestConfig("view", extra_args="--suite=main"),
]

MYSQLREL_FULLTEST_MTR_CONFIGS = DEFAULT_FULLTEST_MTR_CONFIGS + [TestConfig("cursor")]


def f_full_test(
    build_type: str,
    test_configs: Iterable[TestConfig],
    cmake_additional_args: str = "",
) -> BuildFactory:
    factory = util.BuildFactory()
    factory.addStep(printEnv())
    factory.addStep(
        steps.SetProperty(
            property="dockerfile",
            value=util.Interpolate("%(kw:url)s", url=dockerfile),
            description="dockerfile",
        )
    )
    factory.addStep(getSourceTarball())
    factory.addStep(
        steps.ShellCommand(
            name="create html log file",
            command=[
                "bash",
                "-c",
                util.Interpolate(
                    getHTMLLogString(),
                    jobs=util.Property("jobs", default="$(getconf _NPROCESSORS_ONLN)"),
                ),
            ],
        )
    )
    # build steps
    factory.addStep(
        steps.Compile(
            command=[
                "sh",
                "-c",
                util.Interpolate(
                    f"""export PATH=/usr/lib/ccache:/usr/lib64/ccache:$PATH \\
                    && cmake . {build_type} \\
                    -DCMAKE_C_COMPILER_LAUNCHER=ccache \\
                    -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \\
                    -DWITH_EMBEDDED_SERVER=1 \\
                    -DHAVE_EMBEDDED_PRIVILEGE_CONTROL=1 {cmake_additional_args} \\
                    && make -j%(kw:jobs)s VERBOSE=1""",
                    jobs=util.Property("jobs", default="$(getconf _NPROCESSORS_ONLN)"),
                ),
            ],
            env={"CCACHE_DIR": "/mnt/ccache"},
        )
    )

    add_test_steps(factory, test_configs)

    factory.addStep(saveLogs())

    factory.addStep(
        steps.ShellCommand(
            name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True
        )
    )
    return factory


## f_without_server
f_without_server = util.BuildFactory()
f_without_server.addStep(printEnv())
f_without_server.addStep(
    steps.SetProperty(
        property="dockerfile",
        value=util.Interpolate("%(kw:url)s", url=dockerfile),
        description="dockerfile",
    )
)
f_without_server.addStep(steps.ShellCommand(command="ls -la"))
f_without_server.addStep(getSourceTarball())
f_without_server.addStep(steps.ShellCommand(command="ls -la"))
# build steps
f_without_server.addStep(
    steps.Compile(
        command=[
            "sh",
            "-c",
            util.Interpolate(
                "export PATH=/usr/lib/ccache:/usr/lib64/ccache:$PATH && cmake . -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=%(kw:c_compiler)s -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER=%(kw:cxx_compiler)s -DWITHOUT_SERVER=1 && make -j%(kw:jobs)s package",
                jobs=util.Property("jobs", default="$(getconf _NPROCESSORS_ONLN)"),
                c_compiler=util.Property("c_compiler", default="gcc"),
                cxx_compiler=util.Property("cxx_compiler", default="g++"),
            ),
        ],
        env={"CCACHE_DIR": "/mnt/ccache"},
        haltOnFailure="true",
    )
)
# create package and upload to master
f_without_server.addStep(
    steps.SetPropertyFromCommand(
        command="basename mariadb-*-linux-*.tar.gz", property="mariadb_binary"
    )
)
f_without_server.addStep(
    steps.ShellCommand(
        name="save_packages",
        timeout=3600,
        haltOnFailure=True,
        command=util.Interpolate(
            "mkdir -p "
            + "/packages/"
            + "%(prop:tarbuildnum)s"
            + "/"
            + "%(prop:buildername)s"
            + " && sha256sum %(prop:mariadb_binary)s >> sha256sums.txt  && cp "
            + "%(prop:mariadb_binary)s sha256sums.txt"
            + " /packages/"
            + "%(prop:tarbuildnum)s"
            + "/"
            + "%(prop:buildername)s"
            + "/"
            + " && sync /packages/"
            + "%(prop:tarbuildnum)s"
        ),
        doStepIf=lambda step: savePackageIfBranchMatch(step, SAVED_PACKAGE_BRANCHES),
    )
)
f_without_server.addStep(
    steps.ShellCommand(
        name="cleanup", command="rm -r * .* 2> /dev/null || true", alwaysRun=True
    )
)

## f_eco_php
f_eco_php = util.BuildFactory()
f_eco_php.addStep(
    steps.ShellCommand(
        name="fetch_install_script",
        command=[
            "sh",
            "-xc",
            "curl https://raw.githubusercontent.com/MariaDB/buildbot/main/dockerfiles/ecofiles/installdb.sh -o /buildbot/installdb.sh && chmod a+x /buildbot/installdb.sh",
        ],
    )
)
f_eco_php.addStep(
    steps.ShellCommand(
        name="fetch_test_script",
        command=[
            "sh",
            "-xc",
            "curl https://raw.githubusercontent.com/MariaDB/buildbot/main/dockerfiles/ecofiles/test-php.sh -o /buildbot/test-php.sh && chmod a+x /buildbot/test-php.sh",
        ],
    )
)
f_eco_php.addStep(
    steps.ShellCommand(
        name="fetching and installing database",
        command=[
            "/buildbot/installdb.sh",
            util.Interpolate(
                os.environ["ARTIFACTS_URL"]
                + "/%(prop:tarbuildnum)s/%(prop:parentbuildername)s/%(prop:mariadb_binary)s"
            ),
            "--plugin-load-add=auth_pam",
            "--pam_use_cleartext_plugin",
        ],
    ),
)
f_eco_php.addStep(
    steps.ShellCommand(
        name="test PHP-7.1", command=["sh", "-xc", "/buildbot/test-php.sh PHP-7.1"]
    )
)
f_eco_php.addStep(
    steps.ShellCommand(
        name="test PHP-8.0", command=["sh", "-xc", "/buildbot/test-php.sh PHP-8.0"]
    )
)
f_eco_php.addStep(
    steps.ShellCommand(
        name="test PHP-8.1", command=["sh", "-xc", "/buildbot/test-php.sh PHP-8.1"]
    )
)
f_eco_php.addStep(
    steps.ShellCommand(
        name="test master", command=["sh", "-xc", "/buildbot/test-php.sh"]
    )
)

## f_eco_pymysql
f_eco_pymysql = util.BuildFactory()
f_eco_pymysql.addStep(
    steps.ShellCommand(
        name="fetch_install_script",
        command=[
            "sh",
            "-xc",
            "curl https://raw.githubusercontent.com/MariaDB/buildbot/main/dockerfiles/ecofiles/installdb.sh -o /buildbot/installdb.sh && chmod a+x /buildbot/installdb.sh",
        ],
    )
)
f_eco_pymysql.addStep(
    steps.ShellCommand(
        name="fetch_test_script",
        command=[
            "sh",
            "-xc",
            "curl https://raw.githubusercontent.com/MariaDB/buildbot/main/dockerfiles/ecofiles/test-pymysql.sh -o /buildbot/test-pymysql.sh && chmod a+x /buildbot/test-pymysql.sh",
        ],
    )
)
f_eco_pymysql.addStep(
    steps.ShellCommand(
        name="fetching and installing database",
        command=[
            "/buildbot/installdb.sh",
            util.Interpolate(
                os.environ["ARTIFACTS_URL"]
                + "/%(prop:tarbuildnum)s/%(prop:parentbuildername)s/%(prop:mariadb_binary)s"
            ),
        ],
    ),
)
f_eco_pymysql.addStep(
    steps.ShellCommand(
        name="test pymysql-main", command=["sh", "-xc", "/buildbot/test-pymysql.sh"]
    )
)
f_eco_pymysql.addStep(
    steps.ShellCommand(
        name="test pymysql-v0.7.11",
        command=["sh", "-xc", "/buildbot/test-pymysql.sh v0.7.11"],
    )
)

## f_eco_mysqljs
f_eco_mysqljs = util.BuildFactory()
f_eco_mysqljs.addStep(
    steps.ShellCommand(
        name="fetch_install_script",
        command=[
            "sh",
            "-xc",
            "curl https://raw.githubusercontent.com/MariaDB/buildbot/main/dockerfiles/ecofiles/installdb.sh -o /buildbot/installdb.sh && chmod a+x /buildbot/installdb.sh",
        ],
    )
)
f_eco_mysqljs.addStep(
    steps.ShellCommand(
        name="fetch_test_script",
        command=[
            "sh",
            "-xc",
            "curl https://raw.githubusercontent.com/MariaDB/buildbot/main/dockerfiles/ecofiles/test-mysqljs.sh -o /buildbot/test-mysqljs.sh && chmod a+x /buildbot/test-mysqljs.sh",
        ],
    )
)
f_eco_mysqljs.addStep(
    steps.ShellCommand(
        name="fetching and installing database",
        command=[
            "/buildbot/installdb.sh",
            util.Interpolate(
                os.environ["ARTIFACTS_URL"]
                + "/%(prop:tarbuildnum)s/%(prop:parentbuildername)s/%(prop:mariadb_binary)s"
            ),
        ],
    ),
)
f_eco_mysqljs.addStep(
    steps.ShellCommand(
        name="test mysqljs-master", command=["sh", "-xc", "/buildbot/test-mysqljs.sh"]
    )
)
f_eco_mysqljs.addStep(
    steps.ShellCommand(
        name="test mysqljs-v2.18.1",
        command=["sh", "-xc", "/buildbot/test-mysqljs.sh v2.18.1"],
    )
)

# f_prep_local
f_prep_local = util.BuildFactory()
f_prep_local.addStep(
    steps.ShellCommand(
        name="dummy",
        command="ls",
    )
)


####### BUILDERS LIST

c["builders"] = []

c["builders"].append(
    util.BuilderConfig(
        name="x86-debian-12-fulltest",
        workernames=workers["x64-bbw-docker-debian-12-32-bit"],
        tags=["Ubuntu", "full", "gcc"],
        collapseRequests=True,
        nextBuild=nextBuild,
        canStartBuild=canStartBuild,
        locks=getLocks,
        factory=f_full_test(
            build_type="-DBUILD_CONFIG=mysql_release",
            test_configs=MYSQLREL_FULLTEST_MTR_CONFIGS,
            cmake_additional_args="-DWITH_LIBARCHIVE=ON -DWITH_JEMALLOC=auto -DWITH_SSL=system -Wno-dev",
        ),
    )
)

c["builders"].append(
    util.BuilderConfig(
        name="x86-debian-12-fulltest-debug",
        workernames=workers["x64-bbw-docker-debian-12-32-bit-debug"],
        tags=["Ubuntu", "full", "gcc", "debug"],
        collapseRequests=True,
        nextBuild=nextBuild,
        canStartBuild=canStartBuild,
        locks=getLocks,
        factory=f_full_test(
            build_type="-DCMAKE_BUILD_TYPE=Debug",
            test_configs=DEFAULT_FULLTEST_MTR_CONFIGS,
            cmake_additional_args="-DWITH_DBUG_TRACE=OFF",
        ),
    )
)

c["builders"].append(
    util.BuilderConfig(
        name="amd64-debian-11-msan",
        workernames=workers["x64-bbw-docker-msan-clang-debian-11"],
        tags=["Debian", "quick", "clang-15", "msan"],
        collapseRequests=True,
        nextBuild=nextBuild,
        canStartBuild=canStartBuild,
        properties={"c_compiler": "clang-15", "cxx_compiler": "clang++-15"},
        locks=getLocks,
        factory=f_msan_build,
    )
)

c["builders"].append(
    util.BuilderConfig(
        name="amd64-ubuntu-2204-jepsen-mariadb",
        workernames=workers["x64-bbw-docker-ubuntu-2204-jepsen-mariadb"],
        tags=["Ubuntu", "jepsen-mariadb"],
        collapseRequests=True,
        nextBuild=nextBuild,
        canStartBuild=canStartBuild,
        factory=f_jepsen_mariadb,
    )
)
