#!/usr/bin/env python3
import argparse
from pathlib import Path

from dataclasses import dataclass

MASTER_TEMPLATE = """
  {name}:
    extends:
      file: buildbot-master-template.yaml
      service: master-template

    hostname: {hostname}
    container_name: {name}
    entrypoint:
      - /bin/bash
      - -c
      - "/srv/buildbot/master/docker-compose/start.sh {directory}"
    environment:
      - PORT={port}
"""


@dataclass
class MasterSpec:
    name: str
    hostname: str
    directory: str
    port: int


# Generator for all the masters that need to be appended to docker-compose.
def get_masters(name_prefix='dev_', starting_port=9995):
    base_path = Path('../')
    port = starting_port
    for path in base_path.glob("master-*/"):
        rel_path = path.relative_to('../')
        # Master web is hardcoded to 8010.
        if 'master-web' in rel_path.name:
            continue
        yield MasterSpec(name=f'{rel_path.name}',
                         directory=f'{rel_path}',
                         hostname=f'{name_prefix}{rel_path.name}',
                         port=port)
        port += 1

    for path in base_path.glob("autogen/*/"):
        rel_path = path.relative_to('../')
        directory = rel_path.as_posix()
        name = rel_path.as_posix().replace('/', '_')
        yield MasterSpec(name=name,
                         directory=directory,
                         hostname=f'{name_prefix}{name}',
                         port=port)
        port += 1


def main(args):
    name_prefix = '' if args.env == 'prod' else f'{args.env}_'

    with open("docker-compose-base.yaml", mode="r") as file:
        base_file = file.read()

    # Generate startup scripts and Docker Compose pieces for each master directory
    with open("docker-compose.yaml", mode="w", encoding="utf-8") as file:
        file.write(
            "# This is an autogenerated file. Do not edit it manually.\n"
            "# Use `python generate-config.py` instead.\n"
        )
        file.write(base_file)
        for master in get_masters(name_prefix=name_prefix,
                                  starting_port=args.starting_port):
            file.write(
                MASTER_TEMPLATE.format(
                    port=master.port,
                    name=master.name,
                    hostname=master.hostname,
                    directory=master.directory,
                )
            )


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Generate Docker Compose configuration."
    )
    parser.add_argument(
        "--env",
        choices=["prod", "dev", "local"],
        default="local",
        help="Choose the environment (prod/dev). Default is dev.",
    )
    parser.add_argument(
        "--starting-port",
        type=int,
        default=9995,
        help="Which port number to start from for masters to listen on.")

    args = parser.parse_args()
    main(args)
